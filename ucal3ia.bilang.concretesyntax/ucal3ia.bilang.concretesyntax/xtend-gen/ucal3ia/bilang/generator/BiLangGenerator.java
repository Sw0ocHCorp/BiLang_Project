/**
 * generated by Xtext 2.25.0
 */
package ucal3ia.bilang.generator;

import com.google.common.base.Objects;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Set;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import ucal3ia.bilang.abstractsyntax.BarPlot;
import ucal3ia.bilang.abstractsyntax.ColReference;
import ucal3ia.bilang.abstractsyntax.CsvExtractor;
import ucal3ia.bilang.abstractsyntax.DashBoard;
import ucal3ia.bilang.abstractsyntax.DataFiltering;
import ucal3ia.bilang.abstractsyntax.ExcelExtractor;
import ucal3ia.bilang.abstractsyntax.FileExtractor;
import ucal3ia.bilang.abstractsyntax.FilteringStep;
import ucal3ia.bilang.abstractsyntax.LinePlot;
import ucal3ia.bilang.abstractsyntax.MathOperation;
import ucal3ia.bilang.abstractsyntax.Plot;
import ucal3ia.bilang.abstractsyntax.PreprocessingStep;
import ucal3ia.bilang.abstractsyntax.QualitativeFiltering;
import ucal3ia.bilang.abstractsyntax.QuantitativeFiltering;
import ucal3ia.bilang.abstractsyntax.StatisticalOperation;
import ucal3ia.bilang.abstractsyntax.StatisticalOperator;
import ucal3ia.bilang.abstractsyntax.Task;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class BiLangGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    System.out.println("------------------------------");
    EObject _head = IteratorExtensions.<EObject>head(resource.getAllContents());
    Task task = ((Task) _head);
    HashMap<String, HashMap<String, ArrayList<String>>> dataArray = new HashMap<String, HashMap<String, ArrayList<String>>>();
    HashMap<String, HashMap<String, Object>> dashBoardContent = new HashMap<String, HashMap<String, Object>>();
    String fileExtractName = "";
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<!DOCTYPE html>");
    _builder.newLine();
    _builder.append("<html>");
    _builder.newLine();
    _builder.append("<head>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<title>Exemple de graphique avec Chart.js</title>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<script src=\"./fs\"></script>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<script src=\"./csv-parser\"></script>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("</head>");
    _builder.newLine();
    _builder.append("<body>");
    _builder.newLine();
    _builder.newLine();
    String fileContent = _builder.toString();
    EList<FileExtractor> _fileextractor = task.getFileextractor();
    for (final FileExtractor extractor : _fileextractor) {
      {
        HashMap<String, ArrayList<String>> extractorData = this.translateFileExtractor(extractor);
        dataArray.put(extractor.getName(), extractorData);
      }
    }
    EList<DataFiltering> _datafiltering = task.getDatafiltering();
    for (final DataFiltering filter : _datafiltering) {
      {
        HashMap<String, ArrayList<String>> inputData = dataArray.get(filter.getFileextractor().getName());
        dataArray.put(filter.getFileextractor().getName(), this.translateDataFiltering(filter, inputData));
      }
    }
    dashBoardContent = this.translateDashBoard(task.getDashboard(), dataArray.get(task.getDashboard().getFileextractor().getName()));
    String _fileContent = fileContent;
    String _displayDashboard = this.displayDashboard(dashBoardContent, dataArray.get(task.getDashboard().getFileextractor().getName()));
    fileContent = (_fileContent + _displayDashboard);
    String _fileContent_1 = fileContent;
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("</script>");
    _builder_1.newLine();
    _builder_1.append("</body>");
    _builder_1.newLine();
    _builder_1.append("</html>");
    _builder_1.newLine();
    fileContent = (_fileContent_1 + _builder_1);
    String _name = task.getName();
    String _plus = (_name + ".html");
    fsa.generateFile(_plus, fileContent);
  }
  
  public HashMap<String, ArrayList<String>> translateFileExtractor(final FileExtractor fe) {
    int i = 0;
    String fileName = "";
    String[] _split = fe.getPath().split("\\.");
    for (final String str : _split) {
      boolean _contains = str.contains("/");
      if (_contains) {
        String[] _split_1 = str.split("/");
        for (final String tk : _split_1) {
          fileName = tk;
        }
      }
    }
    if ((fe instanceof CsvExtractor)) {
      ArrayList<ArrayList<String>> csvData = new ArrayList<ArrayList<String>>();
      HashMap<String, ArrayList<String>> allData = new HashMap<String, ArrayList<String>>();
      ArrayList<String> labels = new ArrayList<String>();
      String row = "";
      try {
        String _path = ((CsvExtractor)fe).getPath();
        FileReader _fileReader = new FileReader(_path);
        BufferedReader iterator = new BufferedReader(_fileReader);
        int z = 0;
        while ((!Objects.equal((row = iterator.readLine()), null))) {
          {
            if ((z == 0)) {
              List<String> _asList = Arrays.<String>asList(row.split(";"));
              ArrayList<String> _arrayList = new ArrayList<String>(_asList);
              labels = _arrayList;
            } else {
              if ((z == 1)) {
              } else {
                List<String> _asList_1 = Arrays.<String>asList(row.split(";"));
                ArrayList<String> _arrayList_1 = new ArrayList<String>(_asList_1);
                csvData.add(_arrayList_1);
              }
            }
            z++;
          }
        }
      } catch (final Throwable _t) {
        if (_t instanceof Exception) {
          final Exception e = (Exception)_t;
          e.printStackTrace();
        } else {
          throw Exceptions.sneakyThrow(_t);
        }
      }
      int k = 0;
      for (final String lab : labels) {
        {
          ArrayList<String> colData = new ArrayList<String>();
          for (int j = 0; (j < csvData.size()); j++) {
            colData.add(csvData.get(j).get(k));
          }
          allData.put(lab, colData);
          k++;
        }
      }
      return allData;
    }
    if ((fe instanceof ExcelExtractor)) {
      ArrayList<ArrayList<String>> excelData = new ArrayList<ArrayList<String>>();
      HashMap<String, ArrayList<String>> allData_1 = new HashMap<String, ArrayList<String>>();
      return allData_1;
    }
    return null;
  }
  
  public HashMap<String, ArrayList<String>> translateDataFiltering(final DataFiltering df, final HashMap<String, ArrayList<String>> fileData) {
    HashMap<String, ArrayList<String>> filteredData = new HashMap<String, ArrayList<String>>();
    ArrayList<String> targets = new ArrayList<String>();
    ArrayList<String> operationContent = new ArrayList<String>();
    Set<String> _keySet = fileData.keySet();
    for (final String lab : _keySet) {
      filteredData.put(lab, fileData.get(lab));
    }
    FileExtractor _fileextractor = df.getFileextractor();
    if ((_fileextractor instanceof CsvExtractor)) {
      EList<PreprocessingStep> _processingstep = df.getProcessingstep();
      for (final PreprocessingStep preprocess : _processingstep) {
        {
          ArrayList<String> newFieldData = new ArrayList<String>();
          if ((preprocess instanceof MathOperation)) {
            PreprocessingStep lSide = ((MathOperation)preprocess).getLside();
            PreprocessingStep rSide = ((MathOperation)preprocess).getRside();
            if ((lSide instanceof ColReference)) {
              operationContent.add(((ColReference)lSide).getTarget());
              operationContent.add(((MathOperation)preprocess).getOperator().getLiteral());
            }
            if ((rSide instanceof ColReference)) {
              operationContent.add(((ColReference)rSide).getTarget());
            }
            System.out.println(operationContent);
            Set<String> _keySet_1 = filteredData.keySet();
            ArrayList<String> keyList = new ArrayList<String>(_keySet_1);
            for (int i = 0; (i < filteredData.get(keyList.get(0)).size()); i++) {
              {
                int sum = 0;
                double floatSum = 0.0;
                boolean isDouble = false;
                boolean addition = false;
                boolean substraction = false;
                boolean multiplication = false;
                boolean division = false;
                for (int j = 0; (j < operationContent.size()); j++) {
                  if ((j == 0)) {
                    String stringValue = filteredData.get(operationContent.get(0)).get(i);
                    boolean _isDigit = Character.isDigit(stringValue.charAt(0));
                    if (_isDigit) {
                      boolean _contains = stringValue.contains(".");
                      if (_contains) {
                        isDouble = true;
                        double _floatSum = floatSum;
                        Double _valueOf = Double.valueOf(stringValue);
                        floatSum = (_floatSum + (_valueOf).doubleValue());
                      } else {
                        isDouble = false;
                        int _sum = sum;
                        Integer _valueOf_1 = Integer.valueOf(stringValue);
                        sum = (_sum + (_valueOf_1).intValue());
                      }
                    }
                  } else {
                    boolean _equals = operationContent.get(j).equals("+");
                    if (_equals) {
                      addition = true;
                    } else {
                      boolean _equals_1 = operationContent.get(j).equals("-");
                      if (_equals_1) {
                        substraction = true;
                      } else {
                        boolean _equals_2 = operationContent.get(j).equals("*");
                        if (_equals_2) {
                          multiplication = true;
                        } else {
                          boolean _equals_3 = operationContent.get(j).equals("/");
                          if (_equals_3) {
                            division = true;
                          } else {
                            String stringValue_1 = filteredData.get(operationContent.get(j)).get(i);
                            boolean _isDigit_1 = Character.isDigit(stringValue_1.charAt(0));
                            if (_isDigit_1) {
                              boolean _contains_1 = stringValue_1.contains(".");
                              if (_contains_1) {
                                isDouble = true;
                                if ((addition == true)) {
                                  double _floatSum_1 = floatSum;
                                  Double _valueOf_2 = Double.valueOf(stringValue_1);
                                  floatSum = (_floatSum_1 + (_valueOf_2).doubleValue());
                                } else {
                                  if ((substraction == true)) {
                                    double _floatSum_2 = floatSum;
                                    Double _valueOf_3 = Double.valueOf(stringValue_1);
                                    floatSum = (_floatSum_2 - (_valueOf_3).doubleValue());
                                  } else {
                                    if ((multiplication == true)) {
                                      double _floatSum_3 = floatSum;
                                      Double _valueOf_4 = Double.valueOf(stringValue_1);
                                      floatSum = (_floatSum_3 * (_valueOf_4).doubleValue());
                                    } else {
                                      if ((division == true)) {
                                        double _floatSum_4 = floatSum;
                                        Double _valueOf_5 = Double.valueOf(stringValue_1);
                                        floatSum = (_floatSum_4 / (_valueOf_5).doubleValue());
                                      }
                                    }
                                  }
                                }
                              } else {
                                isDouble = false;
                                if ((addition == true)) {
                                  int _sum_1 = sum;
                                  Integer _valueOf_6 = Integer.valueOf(stringValue_1);
                                  sum = (_sum_1 + (_valueOf_6).intValue());
                                } else {
                                  if ((substraction == true)) {
                                    int _sum_2 = sum;
                                    Integer _valueOf_7 = Integer.valueOf(stringValue_1);
                                    sum = (_sum_2 - (_valueOf_7).intValue());
                                  } else {
                                    if ((multiplication == true)) {
                                      int _sum_3 = sum;
                                      Integer _valueOf_8 = Integer.valueOf(stringValue_1);
                                      sum = (_sum_3 * (_valueOf_8).intValue());
                                    } else {
                                      if ((division == true)) {
                                        int _sum_4 = sum;
                                        Integer _valueOf_9 = Integer.valueOf(stringValue_1);
                                        sum = (_sum_4 / (_valueOf_9).intValue());
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                if ((isDouble == false)) {
                  newFieldData.add(Integer.toString(sum));
                } else {
                  newFieldData.add(Double.toString(floatSum));
                }
              }
            }
            filteredData.put("TEST", newFieldData);
          } else {
            if ((preprocess instanceof StatisticalOperation)) {
              ColReference ref = ((StatisticalOperation)preprocess).getColreference();
              StatisticalOperator operator = ((StatisticalOperation)preprocess).getOperator();
            }
          }
        }
      }
      boolean stopLoop = false;
      EList<FilteringStep> _filteringstep = df.getFilteringstep();
      for (final FilteringStep filter : _filteringstep) {
        {
          ArrayList<String> targetCol = fileData.get(filter.getAxis());
          boolean targetCondition = false;
          String main_operator = "";
          if ((filter instanceof QuantitativeFiltering)) {
            main_operator = ((QuantitativeFiltering)filter).getOperator().getLiteral();
            float targetValue = ((QuantitativeFiltering)filter).getValues();
            for (int i = 0; (i < targetCol.size()); i++) {
              {
                boolean _equals = main_operator.equals("<");
                if (_equals) {
                  float _parseFloat = Float.parseFloat(targetCol.get(i));
                  boolean _lessThan = (_parseFloat < targetValue);
                  targetCondition = _lessThan;
                } else {
                  boolean _equals_1 = main_operator.equals(">");
                  if (_equals_1) {
                    float _parseFloat_1 = Float.parseFloat(targetCol.get(i));
                    boolean _greaterThan = (_parseFloat_1 > targetValue);
                    targetCondition = _greaterThan;
                  } else {
                    float _parseFloat_2 = Float.parseFloat(targetCol.get(i));
                    boolean _equals_2 = (_parseFloat_2 == targetValue);
                    targetCondition = _equals_2;
                  }
                }
                while (((stopLoop == false) && (targetCondition == false))) {
                  {
                    boolean _equals_3 = main_operator.equals("<");
                    if (_equals_3) {
                      float _parseFloat_3 = Float.parseFloat(targetCol.get(i));
                      boolean _lessThan_1 = (_parseFloat_3 < targetValue);
                      targetCondition = _lessThan_1;
                    } else {
                      boolean _equals_4 = main_operator.equals(">");
                      if (_equals_4) {
                        float _parseFloat_4 = Float.parseFloat(targetCol.get(i));
                        boolean _greaterThan_1 = (_parseFloat_4 > targetValue);
                        targetCondition = _greaterThan_1;
                      } else {
                        float _parseFloat_5 = Float.parseFloat(targetCol.get(i));
                        boolean _equals_5 = (_parseFloat_5 == targetValue);
                        targetCondition = _equals_5;
                      }
                    }
                    if ((targetCondition == false)) {
                      Set<String> _keySet_1 = filteredData.keySet();
                      for (final String lab_1 : _keySet_1) {
                        {
                          int _size = targetCol.size();
                          boolean _equals_6 = (i == _size);
                          if (_equals_6) {
                            stopLoop = true;
                          }
                          filteredData.get(lab_1).remove(i);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if ((filter instanceof QualitativeFiltering)) {
            boolean _contains = ((QualitativeFiltering)filter).getLabels().contains(", ");
            if (_contains) {
              List<String> _asList = Arrays.<String>asList(((QualitativeFiltering)filter).getLabels().split(", "));
              ArrayList<String> _arrayList = new ArrayList<String>(_asList);
              targets = _arrayList;
            } else {
              boolean _contains_1 = ((QualitativeFiltering)filter).getLabels().contains(",");
              if (_contains_1) {
                List<String> _asList_1 = Arrays.<String>asList(((QualitativeFiltering)filter).getLabels().split(","));
                ArrayList<String> _arrayList_1 = new ArrayList<String>(_asList_1);
                targets = _arrayList_1;
              }
            }
            main_operator = ((QualitativeFiltering)filter).getOperator().getLiteral();
            boolean _equals = main_operator.equals("!=");
            if (_equals) {
              targetCondition = true;
            }
            for (int i = 0; (i < targetCol.size()); i++) {
              while (((stopLoop == false) && (targets.contains(targetCol.get(i)) == targetCondition))) {
                Set<String> _keySet_1 = filteredData.keySet();
                for (final String lab_1 : _keySet_1) {
                  {
                    int _size = targetCol.size();
                    boolean _equals_1 = (i == _size);
                    if (_equals_1) {
                      stopLoop = true;
                    }
                    filteredData.get(lab_1).remove(i);
                  }
                }
              }
            }
          }
        }
      }
      return filteredData;
    }
    FileExtractor _fileextractor_1 = df.getFileextractor();
    if ((_fileextractor_1 instanceof ExcelExtractor)) {
      EList<PreprocessingStep> _processingstep_1 = df.getProcessingstep();
      for (final PreprocessingStep preprocess_1 : _processingstep_1) {
      }
      EList<FilteringStep> _filteringstep_1 = df.getFilteringstep();
      for (final FilteringStep filter_1 : _filteringstep_1) {
      }
      return filteredData;
    }
    return null;
  }
  
  public HashMap<String, HashMap<String, Object>> translateDashBoard(final DashBoard db, final HashMap<String, ArrayList<String>> fileData) {
    HashMap<String, HashMap<String, Object>> dashBoardContent = new HashMap<String, HashMap<String, Object>>();
    String plotType = "";
    EList<Plot> _plot = db.getPlot();
    for (final Plot plot : _plot) {
      {
        HashMap<String, Object> plotContent = new HashMap<String, Object>();
        String key = plot.getName();
        ArrayList<String> xAxis = new ArrayList<String>();
        ArrayList<String> colors = new ArrayList<String>();
        boolean _contains = plot.getColors().contains(", ");
        if (_contains) {
          String[] _split = plot.getColors().split(", ");
          for (final String color : _split) {
            colors.add(color);
          }
          plotContent.put("colors", colors);
        } else {
          boolean _contains_1 = plot.getColors().contains(",");
          if (_contains_1) {
            String[] _split_1 = plot.getColors().split(",");
            for (final String color_1 : _split_1) {
              colors.add(color_1);
            }
            plotContent.put("colors", colors);
          } else {
            colors.add(plot.getColors());
          }
        }
        plotContent.put("colors", colors);
        if ((plot instanceof BarPlot)) {
          plotContent.put("type", "bar");
        } else {
          if ((plot instanceof LinePlot)) {
            plotContent.put("type", "line");
          }
        }
        boolean _contains_2 = plot.getXAxis().contains(", ");
        if (_contains_2) {
          String[] _split_2 = plot.getXAxis().split(", ");
          for (final String lab : _split_2) {
            xAxis.add(lab);
          }
          plotContent.put("xAxis", xAxis);
        } else {
          boolean _contains_3 = plot.getXAxis().contains(",");
          if (_contains_3) {
            String[] _split_3 = plot.getXAxis().split(",");
            for (final String lab_1 : _split_3) {
              xAxis.add(lab_1);
            }
            plotContent.put("xAxis", xAxis);
          } else {
            plotContent.put("xAxis", plot.getXAxis());
          }
        }
        ArrayList<String> yAxis = new ArrayList<String>();
        boolean _contains_4 = plot.getYAxis().contains(", ");
        if (_contains_4) {
          String[] _split_4 = plot.getYAxis().split(", ");
          for (final String lab_2 : _split_4) {
            yAxis.add(lab_2);
          }
          plotContent.put("yAxis", yAxis);
        } else {
          boolean _contains_5 = plot.getYAxis().contains(",");
          if (_contains_5) {
            String[] _split_5 = plot.getYAxis().split(",");
            for (final String lab_3 : _split_5) {
              yAxis.add(lab_3);
            }
            plotContent.put("yAxis", yAxis);
          } else {
            plotContent.put("yAxis", plot.getYAxis());
          }
        }
        plotContent.put("location", plot.getLocation());
        plotContent.put("thickness", Float.toString(plot.getThickness()));
        dashBoardContent.put(key, plotContent);
        System.out.println(dashBoardContent);
      }
    }
    return dashBoardContent;
  }
  
  public String displayDashboard(final HashMap<String, HashMap<String, Object>> dashboardContent, final HashMap<String, ArrayList<String>> fileData) {
    String displayDashboard = "";
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<div>");
    _builder.newLine();
    String content = _builder.toString();
    Set<String> _keySet = dashboardContent.keySet();
    for (final String key : _keySet) {
      String _content = content;
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("<canvas id=\"");
      String _plus = (_builder_1.toString() + key);
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("\"></canvas>");
      String _plus_1 = (_plus + _builder_2);
      content = (_content + _plus_1);
    }
    String _content_1 = content;
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("</div>");
    _builder_3.newLine();
    _builder_3.append("<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>");
    _builder_3.newLine();
    _builder_3.append("<script>");
    _builder_3.newLine();
    _builder_3.append("  \t");
    _builder_3.append("const CHART_COLORS = {");
    _builder_3.newLine();
    _builder_3.append("  \t  ");
    _builder_3.append("redt: \'rgba(255, 99, 132, 0.6)\',");
    _builder_3.newLine();
    _builder_3.append("  \t  ");
    _builder_3.append("red: \'rgb(255, 99, 132)\',");
    _builder_3.newLine();
    _builder_3.append("  \t  ");
    _builder_3.append("orange: \'rgb(255, 159, 64)\',");
    _builder_3.newLine();
    _builder_3.append("  \t  ");
    _builder_3.append("yellow: \'rgb(255, 205, 86)\',");
    _builder_3.newLine();
    _builder_3.append("  \t  ");
    _builder_3.append("green: \'rgb(75, 192, 192)\',");
    _builder_3.newLine();
    _builder_3.append("  \t  ");
    _builder_3.append("bluet: \'rgba(54, 162, 235,0.6)\',");
    _builder_3.newLine();
    _builder_3.append("  \t  ");
    _builder_3.append("blue: \'rgb(54, 162, 235)\',");
    _builder_3.newLine();
    _builder_3.append("  \t  ");
    _builder_3.append("purple: \'rgb(153, 102, 255)\',");
    _builder_3.newLine();
    _builder_3.append("  \t  ");
    _builder_3.append("grey: \'rgb(201, 203, 207)\'");
    _builder_3.newLine();
    _builder_3.append("  \t");
    _builder_3.append("};");
    _builder_3.newLine();
    _builder_3.append("  \t");
    _builder_3.newLine();
    _builder_3.append("  \t");
    _builder_3.append("const NAMED_COLORS = [");
    _builder_3.newLine();
    _builder_3.append("  \t  ");
    _builder_3.append("CHART_COLORS.red,");
    _builder_3.newLine();
    _builder_3.append("  \t  ");
    _builder_3.append("CHART_COLORS.orange,");
    _builder_3.newLine();
    _builder_3.append("  \t  ");
    _builder_3.append("CHART_COLORS.yellow,");
    _builder_3.newLine();
    _builder_3.append("  \t  ");
    _builder_3.append("CHART_COLORS.green,");
    _builder_3.newLine();
    _builder_3.append("  \t  ");
    _builder_3.append("CHART_COLORS.blue,");
    _builder_3.newLine();
    _builder_3.append("  \t  ");
    _builder_3.append("CHART_COLORS.purple,");
    _builder_3.newLine();
    _builder_3.append("  \t  ");
    _builder_3.append("CHART_COLORS.grey,");
    _builder_3.newLine();
    _builder_3.append("  \t");
    _builder_3.append("];");
    content = (_content_1 + _builder_3);
    int j = 0;
    Set<String> _keySet_1 = dashboardContent.keySet();
    for (final String keyPlot : _keySet_1) {
      {
        Object plotType = dashboardContent.get(keyPlot).get("type");
        ArrayList<String> xLabs = new ArrayList<String>();
        ArrayList<String> yLabs = new ArrayList<String>();
        Object _get = dashboardContent.get(keyPlot).get("xAxis");
        if ((_get instanceof ArrayList)) {
          Object _get_1 = dashboardContent.get(keyPlot).get("xAxis");
          xLabs = ((ArrayList) _get_1);
        } else {
          Object _get_2 = dashboardContent.get(keyPlot).get("xAxis");
          xLabs.add(((String) _get_2));
        }
        Object _get_3 = dashboardContent.get(keyPlot).get("yAxis");
        if ((_get_3 instanceof ArrayList)) {
          Object _get_4 = dashboardContent.get(keyPlot).get("yAxis");
          yLabs = ((ArrayList) _get_4);
        } else {
          Object _get_5 = dashboardContent.get(keyPlot).get("yAxis");
          yLabs.add(((String) _get_5));
        }
        ArrayList<ArrayList<String>> yCols = new ArrayList<ArrayList<String>>();
        ArrayList<ArrayList<String>> xCols = new ArrayList<ArrayList<String>>();
        for (int a = 0; (a < yLabs.size()); a++) {
          yCols.add(fileData.get(yLabs.get(a)));
        }
        for (int a = 0; (a < xLabs.size()); a++) {
          xCols.add(fileData.get(xLabs.get(a)));
        }
        String _content_2 = content;
        StringConcatenation _builder_4 = new StringConcatenation();
        _builder_4.append("\t");
        _builder_4.append("const file");
        String _plus_2 = ("\n" + _builder_4);
        String _plus_3 = (_plus_2 + Integer.valueOf(j));
        String _plus_4 = (_plus_3 + Integer.valueOf(1));
        StringConcatenation _builder_5 = new StringConcatenation();
        _builder_5.append("= [");
        String _plus_5 = (_plus_4 + _builder_5);
        content = (_content_2 + _plus_5);
        int yLength = ((Object[])Conversions.unwrapArray(yCols.get(0), Object.class)).length;
        for (int i = 0; (i < yLength); i++) {
          {
            String _content_3 = content;
            StringConcatenation _builder_6 = new StringConcatenation();
            _builder_6.append("\t");
            _builder_6.append("{");
            content = (_content_3 + _builder_6);
            for (int cx = 0; (cx < ((Object[])Conversions.unwrapArray(xCols, Object.class)).length); cx++) {
              String _content_4 = content;
              String _get_6 = xLabs.get(cx);
              StringConcatenation _builder_7 = new StringConcatenation();
              _builder_7.append(": \"");
              String _plus_6 = (_get_6 + _builder_7);
              String _get_7 = xCols.get(cx).get(i);
              String _plus_7 = (_plus_6 + _get_7);
              StringConcatenation _builder_8 = new StringConcatenation();
              _builder_8.append("\", ");
              String _plus_8 = (_plus_7 + _builder_8);
              content = (_content_4 + _plus_8);
            }
            for (int cy = 0; (cy < ((Object[])Conversions.unwrapArray(yCols, Object.class)).length); cy++) {
              String _content_4 = content;
              String _get_6 = yLabs.get(cy);
              StringConcatenation _builder_7 = new StringConcatenation();
              _builder_7.append(": \"");
              String _plus_6 = (_get_6 + _builder_7);
              String _get_7 = yCols.get(cy).get(i);
              String _plus_7 = (_plus_6 + _get_7);
              StringConcatenation _builder_8 = new StringConcatenation();
              _builder_8.append("\", ");
              String _plus_8 = (_plus_7 + _builder_8);
              content = (_content_4 + _plus_8);
            }
            String _content_4 = content;
            content = (_content_4 + "},\n");
          }
        }
        String _content_3 = content;
        StringConcatenation _builder_6 = new StringConcatenation();
        _builder_6.append("\t");
        _builder_6.append("];");
        content = (_content_3 + _builder_6);
        String _content_4 = content;
        content = (_content_4 + "\n");
        String _content_5 = content;
        StringConcatenation _builder_7 = new StringConcatenation();
        _builder_7.append("\t");
        String _plus_6 = (_builder_7.toString() + keyPlot);
        StringConcatenation _builder_8 = new StringConcatenation();
        _builder_8.append("= new Chart(");
        _builder_8.newLine();
        _builder_8.append("\t\t");
        _builder_8.append("document.getElementById(\"");
        String _plus_7 = (_plus_6 + _builder_8);
        String _plus_8 = (_plus_7 + keyPlot);
        StringConcatenation _builder_9 = new StringConcatenation();
        _builder_9.append("\"),");
        _builder_9.newLine();
        _builder_9.append("\t\t");
        _builder_9.append("{");
        _builder_9.newLine();
        _builder_9.append("\t\t\t");
        _builder_9.append("type: \"");
        String _plus_9 = (_plus_8 + _builder_9);
        String _plus_10 = (_plus_9 + plotType);
        StringConcatenation _builder_10 = new StringConcatenation();
        _builder_10.append("\",");
        _builder_10.newLine();
        _builder_10.append("\t\t\t");
        _builder_10.append("data: {");
        String _plus_11 = (_plus_10 + _builder_10);
        content = (_content_5 + _plus_11);
        for (final String xax : xLabs) {
          {
            String _content_6 = content;
            StringConcatenation _builder_11 = new StringConcatenation();
            _builder_11.append("labels: file");
            String _plus_12 = (_builder_11.toString() + Integer.valueOf(j));
            String _plus_13 = (_plus_12 + Integer.valueOf(1));
            StringConcatenation _builder_12 = new StringConcatenation();
            _builder_12.append(".map(row => row.");
            String _plus_14 = (_plus_13 + _builder_12);
            String _plus_15 = (_plus_14 + xax);
            StringConcatenation _builder_13 = new StringConcatenation();
            _builder_13.append("),");
            _builder_13.newLine();
            _builder_13.append("\t\t\t\t");
            _builder_13.append("datasets: [");
            _builder_13.newLine();
            String _plus_16 = (_plus_15 + _builder_13);
            content = (_content_6 + _plus_16);
            Object _get_6 = dashboardContent.get(keyPlot).get("colors");
            ArrayList value = ((ArrayList) _get_6);
            ArrayList<String> convertColors = new ArrayList<String>();
            for (final Object col : value) {
              boolean _contains = value.contains("#");
              if (_contains) {
                String hexR = ((String) col).substring(1, 3);
                String hexG = ((String) col).substring(3, 5);
                String hexB = ((String) col).substring(5);
                convertColors.add((((("rgba(" + hexR) + hexG) + hexB) + ", 0.6)"));
              } else {
                convertColors.add(((String) col));
              }
            }
            for (int a = 0; (a < yLabs.size()); a++) {
              int _size = convertColors.size();
              boolean _greaterThan = (_size > 1);
              if (_greaterThan) {
                String _content_7 = content;
                StringConcatenation _builder_14 = new StringConcatenation();
                _builder_14.append("\t\t\t\t\t");
                _builder_14.append("{");
                _builder_14.newLine();
                _builder_14.append("\t\t\t\t    \t\t");
                _builder_14.append("label: \"");
                String _get_7 = yLabs.get(a);
                String _plus_17 = (_builder_14.toString() + _get_7);
                StringConcatenation _builder_15 = new StringConcatenation();
                _builder_15.append("\",");
                _builder_15.newLine();
                _builder_15.append("\t\t\t\t        \t");
                _builder_15.append("data: file");
                String _plus_18 = (_plus_17 + _builder_15);
                String _plus_19 = (_plus_18 + Integer.valueOf(j));
                String _plus_20 = (_plus_19 + Integer.valueOf(1));
                StringConcatenation _builder_16 = new StringConcatenation();
                _builder_16.append(".map(row => row.");
                String _plus_21 = (_plus_20 + _builder_16);
                String _get_8 = yLabs.get(a);
                String _plus_22 = (_plus_21 + _get_8);
                StringConcatenation _builder_17 = new StringConcatenation();
                _builder_17.append("),");
                _builder_17.newLine();
                _builder_17.append("\t\t\t\t        \t");
                _builder_17.append("borderColor: \"");
                String _plus_23 = (_plus_22 + _builder_17);
                String _get_9 = convertColors.get(a);
                String _plus_24 = (_plus_23 + _get_9);
                StringConcatenation _builder_18 = new StringConcatenation();
                _builder_18.append("\",");
                _builder_18.newLine();
                _builder_18.append("\t\t\t\t        \t");
                _builder_18.append("borderWidth: ");
                String _plus_25 = (_plus_24 + _builder_18);
                Object _get_10 = dashboardContent.get(keyPlot).get("thickness");
                String _plus_26 = (_plus_25 + _get_10);
                StringConcatenation _builder_19 = new StringConcatenation();
                _builder_19.append(",");
                _builder_19.newLine();
                _builder_19.append("\t\t\t\t    \t");
                _builder_19.append("},");
                _builder_19.newLine();
                String _plus_27 = (_plus_26 + _builder_19);
                content = (_content_7 + _plus_27);
              } else {
                String _content_8 = content;
                StringConcatenation _builder_20 = new StringConcatenation();
                _builder_20.append("\t\t\t\t\t");
                _builder_20.append("{");
                _builder_20.newLine();
                _builder_20.append("\t\t\t\t    \t\t");
                _builder_20.append("label: \"");
                String _get_11 = yLabs.get(a);
                String _plus_28 = (_builder_20.toString() + _get_11);
                StringConcatenation _builder_21 = new StringConcatenation();
                _builder_21.append("\",");
                _builder_21.newLine();
                _builder_21.append("\t\t\t\t        \t");
                _builder_21.append("data: file");
                String _plus_29 = (_plus_28 + _builder_21);
                String _plus_30 = (_plus_29 + Integer.valueOf(j));
                String _plus_31 = (_plus_30 + Integer.valueOf(1));
                StringConcatenation _builder_22 = new StringConcatenation();
                _builder_22.append(".map(row => row.");
                String _plus_32 = (_plus_31 + _builder_22);
                String _get_12 = yLabs.get(a);
                String _plus_33 = (_plus_32 + _get_12);
                StringConcatenation _builder_23 = new StringConcatenation();
                _builder_23.append("),");
                _builder_23.newLine();
                _builder_23.append("\t\t\t\t        \t");
                _builder_23.append("borderColor: \"");
                String _plus_34 = (_plus_33 + _builder_23);
                String _get_13 = convertColors.get(0);
                String _plus_35 = (_plus_34 + _get_13);
                StringConcatenation _builder_24 = new StringConcatenation();
                _builder_24.append("\",");
                _builder_24.newLine();
                _builder_24.append("\t\t\t\t        \t");
                _builder_24.append("borderWidth: ");
                String _plus_36 = (_plus_35 + _builder_24);
                Object _get_14 = dashboardContent.get(keyPlot).get("thickness");
                String _plus_37 = (_plus_36 + _get_14);
                StringConcatenation _builder_25 = new StringConcatenation();
                _builder_25.append(",");
                _builder_25.newLine();
                _builder_25.append("\t\t\t\t    \t");
                _builder_25.append("},");
                _builder_25.newLine();
                String _plus_38 = (_plus_37 + _builder_25);
                content = (_content_8 + _plus_38);
              }
            }
          }
        }
        String _content_6 = content;
        StringConcatenation _builder_11 = new StringConcatenation();
        _builder_11.append("\t\t\t");
        _builder_11.append("]");
        _builder_11.newLine();
        _builder_11.append("\t\t");
        _builder_11.append("}");
        _builder_11.newLine();
        _builder_11.append("\t");
        _builder_11.append("}");
        _builder_11.newLine();
        _builder_11.append(");");
        _builder_11.newLine();
        _builder_11.append("\t\t\t\t");
        _builder_11.newLine();
        content = (_content_6 + _builder_11);
        j++;
      }
    }
    return content;
  }
}
