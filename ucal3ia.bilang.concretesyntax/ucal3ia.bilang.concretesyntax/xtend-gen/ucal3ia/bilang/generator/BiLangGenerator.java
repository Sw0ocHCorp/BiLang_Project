/**
 * generated by Xtext 2.25.0
 */
package ucal3ia.bilang.generator;

import com.google.common.base.Objects;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Set;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import ucal3ia.bilang.abstractsyntax.BarPlot;
import ucal3ia.bilang.abstractsyntax.ColReference;
import ucal3ia.bilang.abstractsyntax.CsvExtractor;
import ucal3ia.bilang.abstractsyntax.DashBoard;
import ucal3ia.bilang.abstractsyntax.DataFiltering;
import ucal3ia.bilang.abstractsyntax.DonutPlot;
import ucal3ia.bilang.abstractsyntax.ExcelExtractor;
import ucal3ia.bilang.abstractsyntax.FileExtractor;
import ucal3ia.bilang.abstractsyntax.FilteringStep;
import ucal3ia.bilang.abstractsyntax.LinePlot;
import ucal3ia.bilang.abstractsyntax.MathOperation;
import ucal3ia.bilang.abstractsyntax.MathOperator;
import ucal3ia.bilang.abstractsyntax.PiePlot;
import ucal3ia.bilang.abstractsyntax.Plot;
import ucal3ia.bilang.abstractsyntax.PolarPlot;
import ucal3ia.bilang.abstractsyntax.PreprocessingStep;
import ucal3ia.bilang.abstractsyntax.QualitativeFiltering;
import ucal3ia.bilang.abstractsyntax.QuantitativeFiltering;
import ucal3ia.bilang.abstractsyntax.RadarPlot;
import ucal3ia.bilang.abstractsyntax.ScatterPlot;
import ucal3ia.bilang.abstractsyntax.StatisticalOperation;
import ucal3ia.bilang.abstractsyntax.Task;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class BiLangGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    System.out.println("------------------------------");
    EObject _head = IteratorExtensions.<EObject>head(resource.getAllContents());
    Task task = ((Task) _head);
    HashMap<String, HashMap<String, ArrayList<String>>> dataArray = new HashMap<String, HashMap<String, ArrayList<String>>>();
    HashMap<String, HashMap<String, Object>> dashBoardContent = new HashMap<String, HashMap<String, Object>>();
    String fileExtractName = "";
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<!DOCTYPE html>");
    _builder.newLine();
    _builder.append("<html>");
    _builder.newLine();
    _builder.append("<head>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<title>Exemple de graphique avec Chart.js</title>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<script src=\"./fs\"></script>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<script src=\"./csv-parser\"></script>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<style>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append(".chart-container {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("display: inline-block;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("width: 600px;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("height: 600px;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("margin: 10px;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</style>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("</head>");
    _builder.newLine();
    _builder.append("<body>");
    _builder.newLine();
    _builder.newLine();
    String fileContent = _builder.toString();
    EList<FileExtractor> _fileextractor = task.getFileextractor();
    for (final FileExtractor extractor : _fileextractor) {
      {
        HashMap<String, ArrayList<String>> extractorData = this.translateFileExtractor(extractor);
        dataArray.put(extractor.getName(), extractorData);
      }
    }
    EList<DataFiltering> _datafiltering = task.getDatafiltering();
    for (final DataFiltering filter : _datafiltering) {
      {
        HashMap<String, ArrayList<String>> inputData = dataArray.get(filter.getFileextractor().getName());
        dataArray.put(filter.getFileextractor().getName(), this.translateDataFiltering(filter, inputData));
      }
    }
    dashBoardContent = this.translateDashBoard(task.getDashboard(), dataArray.get(task.getDashboard().getFileextractor().getName()));
    String _fileContent = fileContent;
    String _displayDashboard = this.displayDashboard(dashBoardContent, dataArray.get(task.getDashboard().getFileextractor().getName()));
    fileContent = (_fileContent + _displayDashboard);
    String _fileContent_1 = fileContent;
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("</script>");
    _builder_1.newLine();
    _builder_1.append("</body>");
    _builder_1.newLine();
    _builder_1.append("</html>");
    _builder_1.newLine();
    fileContent = (_fileContent_1 + _builder_1);
    String _name = task.getName();
    String _plus = (_name + ".html");
    fsa.generateFile(_plus, fileContent);
  }
  
  public HashMap<String, ArrayList<String>> translateFileExtractor(final FileExtractor fe) {
    int i = 0;
    String fileName = "";
    String[] _split = fe.getPath().split("\\.");
    for (final String str : _split) {
      boolean _contains = str.contains("/");
      if (_contains) {
        String[] _split_1 = str.split("/");
        for (final String tk : _split_1) {
          fileName = tk;
        }
      }
    }
    if ((fe instanceof CsvExtractor)) {
      ArrayList<ArrayList<String>> csvData = new ArrayList<ArrayList<String>>();
      HashMap<String, ArrayList<String>> allData = new HashMap<String, ArrayList<String>>();
      ArrayList<String> labels = new ArrayList<String>();
      String row = "";
      try {
        String _path = ((CsvExtractor)fe).getPath();
        FileReader _fileReader = new FileReader(_path);
        BufferedReader iterator = new BufferedReader(_fileReader);
        int z = 0;
        while ((!Objects.equal((row = iterator.readLine()), null))) {
          {
            if ((z == 0)) {
              List<String> _asList = Arrays.<String>asList(row.split(";"));
              ArrayList<String> _arrayList = new ArrayList<String>(_asList);
              labels = _arrayList;
            } else {
              if ((z == 1)) {
              } else {
                List<String> _asList_1 = Arrays.<String>asList(row.split(";"));
                ArrayList<String> _arrayList_1 = new ArrayList<String>(_asList_1);
                csvData.add(_arrayList_1);
              }
            }
            z++;
          }
        }
      } catch (final Throwable _t) {
        if (_t instanceof Exception) {
          final Exception e = (Exception)_t;
          e.printStackTrace();
        } else {
          throw Exceptions.sneakyThrow(_t);
        }
      }
      int k = 0;
      for (final String lab : labels) {
        {
          ArrayList<String> colData = new ArrayList<String>();
          for (int j = 0; (j < csvData.size()); j++) {
            colData.add(csvData.get(j).get(k));
          }
          allData.put(lab, colData);
          k++;
        }
      }
      return allData;
    }
    if ((fe instanceof ExcelExtractor)) {
      ArrayList<ArrayList<String>> excelData = new ArrayList<ArrayList<String>>();
      HashMap<String, ArrayList<String>> allData_1 = new HashMap<String, ArrayList<String>>();
      return allData_1;
    }
    return null;
  }
  
  public HashMap<String, ArrayList<String>> translateDataFiltering(final DataFiltering df, final HashMap<String, ArrayList<String>> fileData) {
    HashMap<String, ArrayList<String>> filteredData = new HashMap<String, ArrayList<String>>();
    ArrayList<String> targets = new ArrayList<String>();
    ArrayList<String> operationContent = new ArrayList<String>();
    HashMap<Object, Object> formulaMap = new HashMap<Object, Object>();
    Set<String> _keySet = fileData.keySet();
    for (final String lab : _keySet) {
      filteredData.put(lab, fileData.get(lab));
    }
    FileExtractor _fileextractor = df.getFileextractor();
    if ((_fileextractor instanceof CsvExtractor)) {
      EList<PreprocessingStep> _processingstep = df.getProcessingstep();
      for (final PreprocessingStep preprocess : _processingstep) {
        {
          ArrayList<String> newFieldData = new ArrayList<String>();
          if ((preprocess instanceof MathOperation)) {
            newFieldData = this.MathOperationAlgorithm(((MathOperation) preprocess), filteredData);
            filteredData.put("TEST", newFieldData);
            System.out.println(newFieldData);
          } else {
            if ((preprocess instanceof StatisticalOperation)) {
            }
          }
        }
      }
      boolean stopLoop = false;
      EList<FilteringStep> _filteringstep = df.getFilteringstep();
      for (final FilteringStep filter : _filteringstep) {
        {
          ArrayList<String> targetCol = fileData.get(filter.getAxis());
          boolean targetCondition = false;
          String main_operator = "";
          if ((filter instanceof QuantitativeFiltering)) {
            stopLoop = false;
            main_operator = ((QuantitativeFiltering)filter).getOperator().getLiteral();
            float targetValue = ((QuantitativeFiltering)filter).getValues();
            for (int i = 0; (i < targetCol.size()); i++) {
              {
                boolean _equals = main_operator.equals("<");
                if (_equals) {
                  float _parseFloat = Float.parseFloat(targetCol.get(i));
                  boolean _lessThan = (_parseFloat < targetValue);
                  targetCondition = _lessThan;
                } else {
                  boolean _equals_1 = main_operator.equals(">");
                  if (_equals_1) {
                    float _parseFloat_1 = Float.parseFloat(targetCol.get(i));
                    boolean _greaterThan = (_parseFloat_1 > targetValue);
                    targetCondition = _greaterThan;
                  } else {
                    float _parseFloat_2 = Float.parseFloat(targetCol.get(i));
                    boolean _equals_2 = (_parseFloat_2 == targetValue);
                    targetCondition = _equals_2;
                  }
                }
                while (((stopLoop == false) && (targetCondition == false))) {
                  {
                    boolean _equals_3 = main_operator.equals("<");
                    if (_equals_3) {
                      float _parseFloat_3 = Float.parseFloat(targetCol.get(i));
                      boolean _lessThan_1 = (_parseFloat_3 < targetValue);
                      targetCondition = _lessThan_1;
                    } else {
                      boolean _equals_4 = main_operator.equals(">");
                      if (_equals_4) {
                        float _parseFloat_4 = Float.parseFloat(targetCol.get(i));
                        boolean _greaterThan_1 = (_parseFloat_4 > targetValue);
                        targetCondition = _greaterThan_1;
                      } else {
                        float _parseFloat_5 = Float.parseFloat(targetCol.get(i));
                        boolean _equals_5 = (_parseFloat_5 == targetValue);
                        targetCondition = _equals_5;
                      }
                    }
                    if ((targetCondition == false)) {
                      Set<String> _keySet_1 = filteredData.keySet();
                      for (final String lab_1 : _keySet_1) {
                        {
                          int _size = targetCol.size();
                          boolean _equals_6 = (i == _size);
                          if (_equals_6) {
                            stopLoop = true;
                          }
                          int _size_1 = filteredData.get(lab_1).size();
                          boolean _greaterThan_2 = (_size_1 > i);
                          if (_greaterThan_2) {
                            filteredData.get(lab_1).remove(i);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if ((filter instanceof QualitativeFiltering)) {
            stopLoop = false;
            boolean _contains = ((QualitativeFiltering)filter).getLabels().contains(", ");
            if (_contains) {
              List<String> _asList = Arrays.<String>asList(((QualitativeFiltering)filter).getLabels().split(", "));
              ArrayList<String> _arrayList = new ArrayList<String>(_asList);
              targets = _arrayList;
            } else {
              boolean _contains_1 = ((QualitativeFiltering)filter).getLabels().contains(",");
              if (_contains_1) {
                List<String> _asList_1 = Arrays.<String>asList(((QualitativeFiltering)filter).getLabels().split(","));
                ArrayList<String> _arrayList_1 = new ArrayList<String>(_asList_1);
                targets = _arrayList_1;
              } else {
                targets.add(((QualitativeFiltering)filter).getLabels());
              }
            }
            main_operator = ((QualitativeFiltering)filter).getOperator().getLiteral();
            boolean _equals = main_operator.equals("!=");
            if (_equals) {
              targetCondition = true;
            }
            for (int i = 0; (i < targetCol.size()); i++) {
              while (((stopLoop == false) && (targets.contains(targetCol.get(i)) == targetCondition))) {
                Set<String> _keySet_1 = filteredData.keySet();
                for (final String lab_1 : _keySet_1) {
                  {
                    int _size = targetCol.size();
                    boolean _equals_1 = (i == _size);
                    if (_equals_1) {
                      stopLoop = true;
                    }
                    int _size_1 = filteredData.get(lab_1).size();
                    boolean _greaterThan = (_size_1 > i);
                    if (_greaterThan) {
                      filteredData.get(lab_1).remove(i);
                    }
                  }
                }
              }
            }
          }
        }
      }
      return filteredData;
    }
    FileExtractor _fileextractor_1 = df.getFileextractor();
    if ((_fileextractor_1 instanceof ExcelExtractor)) {
      EList<PreprocessingStep> _processingstep_1 = df.getProcessingstep();
      for (final PreprocessingStep preprocess_1 : _processingstep_1) {
      }
      EList<FilteringStep> _filteringstep_1 = df.getFilteringstep();
      for (final FilteringStep filter_1 : _filteringstep_1) {
      }
      return filteredData;
    }
    return null;
  }
  
  public HashMap<String, HashMap<String, Object>> translateDashBoard(final DashBoard db, final HashMap<String, ArrayList<String>> fileData) {
    HashMap<String, HashMap<String, Object>> dashBoardContent = new HashMap<String, HashMap<String, Object>>();
    String plotType = "";
    EList<Plot> _plot = db.getPlot();
    for (final Plot plot : _plot) {
      {
        HashMap<String, Object> plotContent = new HashMap<String, Object>();
        String key = plot.getName();
        ArrayList<String> xAxis = new ArrayList<String>();
        ArrayList<String> colors = new ArrayList<String>();
        String _colors = plot.getColors();
        boolean _notEquals = (!Objects.equal(_colors, null));
        if (_notEquals) {
          boolean _contains = plot.getColors().contains(", ");
          if (_contains) {
            String[] _split = plot.getColors().split(", ");
            for (final String color : _split) {
              colors.add(color);
            }
            plotContent.put("colors", colors);
          } else {
            boolean _contains_1 = plot.getColors().contains(",");
            if (_contains_1) {
              String[] _split_1 = plot.getColors().split(",");
              for (final String color_1 : _split_1) {
                colors.add(color_1);
              }
              plotContent.put("colors", colors);
            } else {
              colors.add(plot.getColors());
            }
          }
          plotContent.put("colors", colors);
        }
        if ((plot instanceof BarPlot)) {
          plotContent.put("type", "bar");
        } else {
          if ((plot instanceof ScatterPlot)) {
            plotContent.put("type", "scatter");
          } else {
            if ((plot instanceof LinePlot)) {
              plotContent.put("type", "line");
            } else {
              if ((plot instanceof PiePlot)) {
                plotContent.put("type", "pie");
              } else {
                if ((plot instanceof PolarPlot)) {
                  plotContent.put("type", "polarArea");
                } else {
                  if ((plot instanceof DonutPlot)) {
                    plotContent.put("type", "doughnut");
                  } else {
                    if ((plot instanceof RadarPlot)) {
                      plotContent.put("type", "radar");
                    }
                  }
                }
              }
            }
          }
        }
        boolean _contains_2 = plot.getXAxis().contains(", ");
        if (_contains_2) {
          String[] _split_2 = plot.getXAxis().split(", ");
          for (final String lab : _split_2) {
            xAxis.add(lab);
          }
          plotContent.put("xAxis", xAxis);
        } else {
          boolean _contains_3 = plot.getXAxis().contains(",");
          if (_contains_3) {
            String[] _split_3 = plot.getXAxis().split(",");
            for (final String lab_1 : _split_3) {
              xAxis.add(lab_1);
            }
            plotContent.put("xAxis", xAxis);
          } else {
            plotContent.put("xAxis", plot.getXAxis());
          }
        }
        ArrayList<String> yAxis = new ArrayList<String>();
        boolean _contains_4 = plot.getYAxis().contains(", ");
        if (_contains_4) {
          String[] _split_4 = plot.getYAxis().split(", ");
          for (final String lab_2 : _split_4) {
            yAxis.add(lab_2);
          }
          plotContent.put("yAxis", yAxis);
        } else {
          boolean _contains_5 = plot.getYAxis().contains(",");
          if (_contains_5) {
            String[] _split_5 = plot.getYAxis().split(",");
            for (final String lab_3 : _split_5) {
              yAxis.add(lab_3);
            }
            plotContent.put("yAxis", yAxis);
          } else {
            plotContent.put("yAxis", plot.getYAxis());
          }
        }
        int _location = plot.getLocation();
        boolean _notEquals_1 = (_location != (-1));
        if (_notEquals_1) {
          plotContent.put("location", Integer.valueOf(plot.getLocation()));
        }
        float _thickness = plot.getThickness();
        boolean _notEquals_2 = (_thickness != 0.0);
        if (_notEquals_2) {
          plotContent.put("thickness", Float.toString(plot.getThickness()));
        }
        dashBoardContent.put(key, plotContent);
        System.out.println(dashBoardContent);
      }
    }
    return dashBoardContent;
  }
  
  public String displayDashboard(final HashMap<String, HashMap<String, Object>> dashboardContent, final HashMap<String, ArrayList<String>> fileData) {
    String displayDashboard = "";
    String content = "";
    String targetkey = "";
    for (int i = 0; (i < ((Object[])Conversions.unwrapArray(dashboardContent.keySet(), Object.class)).length); i++) {
      {
        Set<String> _keySet = dashboardContent.keySet();
        for (final String key : _keySet) {
          if ((dashboardContent.get(key).containsKey("location") && Objects.equal(dashboardContent.get(key).get("location"), Integer.valueOf(i)))) {
            targetkey = key;
          }
        }
        String _content = content;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("<div class=\"chart-container\">");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("<canvas id=\"");
        String _plus = (_builder.toString() + targetkey);
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("\"></canvas>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("</div>");
        String _plus_1 = (_plus + _builder_1);
        content = (_content + _plus_1);
        String _content_1 = content;
        content = (_content_1 + "\n");
      }
    }
    String _content = content;
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>");
    _builder.newLine();
    _builder.append("<script>");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("const CHART_COLORS = {");
    _builder.newLine();
    _builder.append("  \t  ");
    _builder.append("redt: \'rgba(255, 99, 132, 0.6)\',");
    _builder.newLine();
    _builder.append("  \t  ");
    _builder.append("red: \'rgb(255, 99, 132)\',");
    _builder.newLine();
    _builder.append("  \t  ");
    _builder.append("orange: \'rgb(255, 159, 64)\',");
    _builder.newLine();
    _builder.append("  \t  ");
    _builder.append("yellow: \'rgb(255, 205, 86)\',");
    _builder.newLine();
    _builder.append("  \t  ");
    _builder.append("green: \'rgb(75, 192, 192)\',");
    _builder.newLine();
    _builder.append("  \t  ");
    _builder.append("bluet: \'rgba(54, 162, 235,0.6)\',");
    _builder.newLine();
    _builder.append("  \t  ");
    _builder.append("blue: \'rgb(54, 162, 235)\',");
    _builder.newLine();
    _builder.append("  \t  ");
    _builder.append("purple: \'rgb(153, 102, 255)\',");
    _builder.newLine();
    _builder.append("  \t  ");
    _builder.append("grey: \'rgb(201, 203, 207)\'");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("};");
    _builder.newLine();
    _builder.append("  \t");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("const NAMED_COLORS = [");
    _builder.newLine();
    _builder.append("  \t  ");
    _builder.append("CHART_COLORS.red,");
    _builder.newLine();
    _builder.append("  \t  ");
    _builder.append("CHART_COLORS.orange,");
    _builder.newLine();
    _builder.append("  \t  ");
    _builder.append("CHART_COLORS.yellow,");
    _builder.newLine();
    _builder.append("  \t  ");
    _builder.append("CHART_COLORS.green,");
    _builder.newLine();
    _builder.append("  \t  ");
    _builder.append("CHART_COLORS.blue,");
    _builder.newLine();
    _builder.append("  \t  ");
    _builder.append("CHART_COLORS.purple,");
    _builder.newLine();
    _builder.append("  \t  ");
    _builder.append("CHART_COLORS.grey,");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("];");
    content = (_content + _builder);
    int j = 0;
    Set<String> _keySet = dashboardContent.keySet();
    for (final String keyPlot : _keySet) {
      {
        Object plotType = dashboardContent.get(keyPlot).get("type");
        ArrayList<String> xLabs = new ArrayList<String>();
        ArrayList<String> yLabs = new ArrayList<String>();
        Object _get = dashboardContent.get(keyPlot).get("xAxis");
        if ((_get instanceof ArrayList)) {
          Object _get_1 = dashboardContent.get(keyPlot).get("xAxis");
          xLabs = ((ArrayList) _get_1);
        } else {
          Object _get_2 = dashboardContent.get(keyPlot).get("xAxis");
          xLabs.add(((String) _get_2));
        }
        Object _get_3 = dashboardContent.get(keyPlot).get("yAxis");
        if ((_get_3 instanceof ArrayList)) {
          Object _get_4 = dashboardContent.get(keyPlot).get("yAxis");
          yLabs = ((ArrayList) _get_4);
        } else {
          Object _get_5 = dashboardContent.get(keyPlot).get("yAxis");
          yLabs.add(((String) _get_5));
        }
        ArrayList<ArrayList<String>> yCols = new ArrayList<ArrayList<String>>();
        ArrayList<ArrayList<String>> xCols = new ArrayList<ArrayList<String>>();
        for (int a = 0; (a < yLabs.size()); a++) {
          yCols.add(fileData.get(yLabs.get(a)));
        }
        for (int a = 0; (a < xLabs.size()); a++) {
          xCols.add(fileData.get(xLabs.get(a)));
        }
        String _content_1 = content;
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("\t");
        _builder_1.append("const file");
        String _plus = ("\n" + _builder_1);
        String _plus_1 = (_plus + Integer.valueOf(j));
        String _plus_2 = (_plus_1 + Integer.valueOf(1));
        StringConcatenation _builder_2 = new StringConcatenation();
        _builder_2.append("= [");
        String _plus_3 = (_plus_2 + _builder_2);
        content = (_content_1 + _plus_3);
        int yLength = ((Object[])Conversions.unwrapArray(yCols.get(0), Object.class)).length;
        for (int i = 0; (i < yLength); i++) {
          {
            String _content_2 = content;
            StringConcatenation _builder_3 = new StringConcatenation();
            _builder_3.append("\t");
            _builder_3.append("{");
            content = (_content_2 + _builder_3);
            for (int cx = 0; (cx < ((Object[])Conversions.unwrapArray(xCols, Object.class)).length); cx++) {
              String _content_3 = content;
              String _get_6 = xLabs.get(cx);
              StringConcatenation _builder_4 = new StringConcatenation();
              _builder_4.append(": \"");
              String _plus_4 = (_get_6 + _builder_4);
              String _get_7 = xCols.get(cx).get(i);
              String _plus_5 = (_plus_4 + _get_7);
              StringConcatenation _builder_5 = new StringConcatenation();
              _builder_5.append("\", ");
              String _plus_6 = (_plus_5 + _builder_5);
              content = (_content_3 + _plus_6);
            }
            for (int cy = 0; (cy < ((Object[])Conversions.unwrapArray(yCols, Object.class)).length); cy++) {
              String _content_3 = content;
              String _get_6 = yLabs.get(cy);
              StringConcatenation _builder_4 = new StringConcatenation();
              _builder_4.append(": \"");
              String _plus_4 = (_get_6 + _builder_4);
              String _get_7 = yCols.get(cy).get(i);
              String _plus_5 = (_plus_4 + _get_7);
              StringConcatenation _builder_5 = new StringConcatenation();
              _builder_5.append("\", ");
              String _plus_6 = (_plus_5 + _builder_5);
              content = (_content_3 + _plus_6);
            }
            String _content_3 = content;
            content = (_content_3 + "},\n");
          }
        }
        String _content_2 = content;
        StringConcatenation _builder_3 = new StringConcatenation();
        _builder_3.append("\t");
        _builder_3.append("];");
        content = (_content_2 + _builder_3);
        String _content_3 = content;
        content = (_content_3 + "\n");
        String _content_4 = content;
        StringConcatenation _builder_4 = new StringConcatenation();
        _builder_4.append("\t");
        String _plus_4 = (_builder_4.toString() + keyPlot);
        StringConcatenation _builder_5 = new StringConcatenation();
        _builder_5.append("= new Chart(");
        _builder_5.newLine();
        _builder_5.append("\t\t");
        _builder_5.append("document.getElementById(\"");
        String _plus_5 = (_plus_4 + _builder_5);
        String _plus_6 = (_plus_5 + keyPlot);
        StringConcatenation _builder_6 = new StringConcatenation();
        _builder_6.append("\"),");
        _builder_6.newLine();
        _builder_6.append("\t\t");
        _builder_6.append("{");
        _builder_6.newLine();
        _builder_6.append("\t\t\t");
        _builder_6.append("type: \"");
        String _plus_7 = (_plus_6 + _builder_6);
        String _plus_8 = (_plus_7 + plotType);
        StringConcatenation _builder_7 = new StringConcatenation();
        _builder_7.append("\",");
        _builder_7.newLine();
        _builder_7.append("\t\t\t");
        _builder_7.append("data: {");
        String _plus_9 = (_plus_8 + _builder_7);
        content = (_content_4 + _plus_9);
        for (final String xax : xLabs) {
          {
            String _content_5 = content;
            StringConcatenation _builder_8 = new StringConcatenation();
            _builder_8.append("labels: file");
            String _plus_10 = (_builder_8.toString() + Integer.valueOf(j));
            String _plus_11 = (_plus_10 + Integer.valueOf(1));
            StringConcatenation _builder_9 = new StringConcatenation();
            _builder_9.append(".map(row => row.");
            String _plus_12 = (_plus_11 + _builder_9);
            String _plus_13 = (_plus_12 + xax);
            StringConcatenation _builder_10 = new StringConcatenation();
            _builder_10.append("),");
            _builder_10.newLine();
            _builder_10.append("\t\t\t\t");
            _builder_10.append("datasets: [");
            _builder_10.newLine();
            String _plus_14 = (_plus_13 + _builder_10);
            content = (_content_5 + _plus_14);
            ArrayList<String> value = new ArrayList<String>();
            boolean _containsKey = dashboardContent.get(keyPlot).containsKey("colors");
            if (_containsKey) {
              Object _get_6 = dashboardContent.get(keyPlot).get("colors");
              value = ((ArrayList) _get_6);
            }
            ArrayList<String> convertColors = new ArrayList<String>();
            for (final String col : value) {
              boolean _contains = value.contains("#");
              if (_contains) {
                String hexR = ((String) col).substring(1, 3);
                String hexG = ((String) col).substring(3, 5);
                String hexB = ((String) col).substring(5);
                convertColors.add((((("rgba(" + hexR) + hexG) + hexB) + ", 0.6)"));
              } else {
                convertColors.add(((String) col));
              }
            }
            for (int a = 0; (a < yLabs.size()); a++) {
              int _size = convertColors.size();
              boolean _greaterThan = (_size > 1);
              if (_greaterThan) {
                String _content_6 = content;
                StringConcatenation _builder_11 = new StringConcatenation();
                _builder_11.append("\t\t\t\t\t");
                _builder_11.append("{");
                _builder_11.newLine();
                _builder_11.append("\t\t\t\t    \t\t");
                _builder_11.append("label: \"");
                String _get_7 = yLabs.get(a);
                String _plus_15 = (_builder_11.toString() + _get_7);
                StringConcatenation _builder_12 = new StringConcatenation();
                _builder_12.append("\",");
                _builder_12.newLine();
                _builder_12.append("\t\t\t\t        \t");
                _builder_12.append("data: file");
                String _plus_16 = (_plus_15 + _builder_12);
                String _plus_17 = (_plus_16 + Integer.valueOf(j));
                String _plus_18 = (_plus_17 + Integer.valueOf(1));
                StringConcatenation _builder_13 = new StringConcatenation();
                _builder_13.append(".map(row => row.");
                String _plus_19 = (_plus_18 + _builder_13);
                String _get_8 = yLabs.get(a);
                String _plus_20 = (_plus_19 + _get_8);
                StringConcatenation _builder_14 = new StringConcatenation();
                _builder_14.append("),");
                _builder_14.newLine();
                _builder_14.append("\t\t\t\t        \t");
                _builder_14.append("borderColor: \"");
                String _plus_21 = (_plus_20 + _builder_14);
                String _get_9 = convertColors.get(a);
                String _plus_22 = (_plus_21 + _get_9);
                content = (_content_6 + _plus_22);
                boolean _containsKey_1 = dashboardContent.get(keyPlot).containsKey("thickness");
                if (_containsKey_1) {
                  String _content_7 = content;
                  StringConcatenation _builder_15 = new StringConcatenation();
                  _builder_15.append("\",");
                  _builder_15.newLine();
                  _builder_15.append("\t\t\t\t        \t");
                  _builder_15.append("borderWidth: ");
                  Object _get_10 = dashboardContent.get(keyPlot).get("thickness");
                  String _plus_23 = (_builder_15.toString() + _get_10);
                  content = (_content_7 + _plus_23);
                }
                String _content_8 = content;
                StringConcatenation _builder_16 = new StringConcatenation();
                _builder_16.append(",");
                _builder_16.newLine();
                _builder_16.append("\t\t\t\t    \t");
                _builder_16.append("},");
                _builder_16.newLine();
                content = (_content_8 + _builder_16);
              } else {
                int _size_1 = convertColors.size();
                boolean _equals = (_size_1 == 1);
                if (_equals) {
                  String _content_9 = content;
                  StringConcatenation _builder_17 = new StringConcatenation();
                  _builder_17.append("\t\t\t\t\t");
                  _builder_17.append("{");
                  _builder_17.newLine();
                  _builder_17.append("\t\t\t\t    \t\t");
                  _builder_17.append("label: \"");
                  String _get_11 = yLabs.get(a);
                  String _plus_24 = (_builder_17.toString() + _get_11);
                  StringConcatenation _builder_18 = new StringConcatenation();
                  _builder_18.append("\",");
                  _builder_18.newLine();
                  _builder_18.append("\t\t\t\t        \t");
                  _builder_18.append("data: file");
                  String _plus_25 = (_plus_24 + _builder_18);
                  String _plus_26 = (_plus_25 + Integer.valueOf(j));
                  String _plus_27 = (_plus_26 + Integer.valueOf(1));
                  StringConcatenation _builder_19 = new StringConcatenation();
                  _builder_19.append(".map(row => row.");
                  String _plus_28 = (_plus_27 + _builder_19);
                  String _get_12 = yLabs.get(a);
                  String _plus_29 = (_plus_28 + _get_12);
                  StringConcatenation _builder_20 = new StringConcatenation();
                  _builder_20.append("),");
                  _builder_20.newLine();
                  _builder_20.append("\t\t\t\t        \t");
                  _builder_20.append("borderColor: \"");
                  String _plus_30 = (_plus_29 + _builder_20);
                  String _get_13 = convertColors.get(0);
                  String _plus_31 = (_plus_30 + _get_13);
                  StringConcatenation _builder_21 = new StringConcatenation();
                  _builder_21.append("\"");
                  String _plus_32 = (_plus_31 + _builder_21);
                  content = (_content_9 + _plus_32);
                  boolean _containsKey_2 = dashboardContent.get(keyPlot).containsKey("thickness");
                  if (_containsKey_2) {
                    String _content_10 = content;
                    StringConcatenation _builder_22 = new StringConcatenation();
                    _builder_22.append("borderWidth: ");
                    Object _get_14 = dashboardContent.get(keyPlot).get("thickness");
                    String _plus_33 = (_builder_22.toString() + _get_14);
                    content = (_content_10 + _plus_33);
                  }
                  String _content_11 = content;
                  StringConcatenation _builder_23 = new StringConcatenation();
                  _builder_23.append(",");
                  _builder_23.newLine();
                  _builder_23.append("\t\t\t\t    \t");
                  _builder_23.append("},");
                  _builder_23.newLine();
                  content = (_content_11 + _builder_23);
                } else {
                  String _content_12 = content;
                  StringConcatenation _builder_24 = new StringConcatenation();
                  _builder_24.append("\t\t\t\t\t");
                  _builder_24.append("{");
                  _builder_24.newLine();
                  _builder_24.append("\t\t\t\t    \t\t");
                  _builder_24.append("label: \"");
                  String _get_15 = yLabs.get(a);
                  String _plus_34 = (_builder_24.toString() + _get_15);
                  StringConcatenation _builder_25 = new StringConcatenation();
                  _builder_25.append("\",");
                  _builder_25.newLine();
                  _builder_25.append("\t\t\t\t        \t");
                  _builder_25.append("data: file");
                  String _plus_35 = (_plus_34 + _builder_25);
                  String _plus_36 = (_plus_35 + Integer.valueOf(j));
                  String _plus_37 = (_plus_36 + Integer.valueOf(1));
                  StringConcatenation _builder_26 = new StringConcatenation();
                  _builder_26.append(".map(row => row.");
                  String _plus_38 = (_plus_37 + _builder_26);
                  String _get_16 = yLabs.get(a);
                  String _plus_39 = (_plus_38 + _get_16);
                  StringConcatenation _builder_27 = new StringConcatenation();
                  _builder_27.append(")");
                  String _plus_40 = (_plus_39 + _builder_27);
                  content = (_content_12 + _plus_40);
                  boolean _containsKey_3 = dashboardContent.get(keyPlot).containsKey("thickness");
                  if (_containsKey_3) {
                    String _content_13 = content;
                    StringConcatenation _builder_28 = new StringConcatenation();
                    _builder_28.append("borderWidth: ");
                    Object _get_17 = dashboardContent.get(keyPlot).get("thickness");
                    String _plus_41 = (_builder_28.toString() + _get_17);
                    content = (_content_13 + _plus_41);
                  }
                  String _content_14 = content;
                  StringConcatenation _builder_29 = new StringConcatenation();
                  _builder_29.append(",");
                  _builder_29.newLine();
                  _builder_29.append("\t\t\t\t    \t");
                  _builder_29.append("},");
                  _builder_29.newLine();
                  content = (_content_14 + _builder_29);
                }
              }
            }
          }
        }
        String _content_5 = content;
        StringConcatenation _builder_8 = new StringConcatenation();
        _builder_8.append("\t\t\t");
        _builder_8.append("]");
        _builder_8.newLine();
        _builder_8.append("\t\t");
        _builder_8.append("}");
        _builder_8.newLine();
        _builder_8.append("\t");
        _builder_8.append("}");
        _builder_8.newLine();
        _builder_8.append(");");
        _builder_8.newLine();
        _builder_8.append("\t\t\t\t");
        _builder_8.newLine();
        content = (_content_5 + _builder_8);
        j++;
      }
    }
    return content;
  }
  
  public ArrayList<String> computeStatisticOperation(final String targetCol, final String operator, final HashMap<String, ArrayList<String>> fileData) {
    ArrayList<Float> colRef = new ArrayList<Float>();
    ArrayList<String> _get = fileData.get(targetCol);
    for (final String value : _get) {
      colRef.add(Float.valueOf(Float.parseFloat(value)));
    }
    Collections.<Float>sort(colRef);
    float sum = ((float) 0);
    ArrayList<String> statVal = new ArrayList<String>();
    boolean _equals = operator.equals("MEAN");
    if (_equals) {
      for (int i = 0; (i < colRef.size()); i++) {
        float _sum = sum;
        Float _get_1 = colRef.get(i);
        sum = (_sum + (_get_1).floatValue());
      }
      int _size = colRef.size();
      statVal.add(Float.valueOf((sum / _size)).toString());
    } else {
      boolean _equals_1 = operator.equals("MEDIAN");
      if (_equals_1) {
        int _size_1 = colRef.size();
        int _modulo = (_size_1 % 2);
        boolean _notEquals = (_modulo != 0);
        if (_notEquals) {
          int _size_2 = colRef.size();
          int _divide = (_size_2 / 2);
          int _plus = (_divide + 1);
          statVal.add(colRef.get(_plus).toString());
        } else {
          int _size_3 = colRef.size();
          int _divide_1 = (_size_3 / 2);
          Float fval = colRef.get(_divide_1);
          int _size_4 = colRef.size();
          int _divide_2 = (_size_4 / 2);
          int _plus_1 = (_divide_2 + 1);
          Float sval = colRef.get(_plus_1);
          statVal.add(Float.valueOf((((fval).floatValue() + (sval).floatValue()) / 2)).toString());
        }
      } else {
        float standardDeviation = ((float) 0);
        for (final Float num : colRef) {
          float _sum = sum;
          sum = (_sum + (num).floatValue());
        }
        int _size_5 = colRef.size();
        float mean = (sum / _size_5);
        for (final Float num_1 : colRef) {
          float _standardDeviation = standardDeviation;
          double _pow = Math.pow(((num_1).floatValue() - mean), 2);
          standardDeviation = (_standardDeviation + ((float) _pow));
        }
        int _size_6 = colRef.size();
        float _divide_3 = (standardDeviation / _size_6);
        statVal.add(Double.valueOf(Math.sqrt(_divide_3)).toString());
      }
    }
    return statVal;
  }
  
  public ArrayList<String> computeColsOperation(final Object lSide, final String operator, final Object rSide, final HashMap<String, ArrayList<String>> csvData) {
    ArrayList<String> newFieldData = new ArrayList<String>();
    ArrayList<String> lData = new ArrayList<String>();
    ArrayList<String> rData = new ArrayList<String>();
    boolean isStatistic = false;
    if (((lSide instanceof StatisticalOperation) && (rSide instanceof StatisticalOperation))) {
    } else {
      if (((lSide instanceof String) && (rSide instanceof String))) {
        lData = csvData.get(lSide);
        rData = csvData.get(rSide);
      } else {
        if ((lSide instanceof String)) {
          lData = csvData.get(lSide);
          if ((rSide instanceof ArrayList)) {
            rData = ((ArrayList<String>) rSide);
          } else {
            rData = this.computeStatisticOperation(((StatisticalOperation) rSide).getColreference().getTarget(), ((StatisticalOperation) rSide).getOperator().getLiteral(), csvData);
            isStatistic = true;
          }
        } else {
          if ((rSide instanceof String)) {
            rData = csvData.get(rSide);
            if ((lSide instanceof ArrayList)) {
              lData = ((ArrayList<String>) lSide);
            } else {
              lData = this.computeStatisticOperation(((StatisticalOperation) lSide).getColreference().getTarget(), ((StatisticalOperation) lSide).getOperator().getLiteral(), csvData);
              isStatistic = true;
            }
          } else {
            lData = ((ArrayList<String>) lSide);
            rData = ((ArrayList<String>) rSide);
          }
        }
      }
    }
    if (isStatistic) {
      if ((lSide instanceof StatisticalOperation)) {
        String lSideValue = lData.get(0);
        for (int i = 0; (i < rData.size()); i++) {
          {
            String rSideValue = rData.get(i);
            float result = ((float) 0);
            boolean _equals = operator.equals("+");
            if (_equals) {
              float _parseFloat = Float.parseFloat(lSideValue);
              float _parseFloat_1 = Float.parseFloat(rSideValue);
              float _plus = (_parseFloat + _parseFloat_1);
              result = _plus;
            } else {
              boolean _equals_1 = operator.equals("-");
              if (_equals_1) {
                float _parseFloat_2 = Float.parseFloat(lSideValue);
                float _parseFloat_3 = Float.parseFloat(rSideValue);
                float _minus = (_parseFloat_2 - _parseFloat_3);
                result = _minus;
              } else {
                boolean _equals_2 = operator.equals("*");
                if (_equals_2) {
                  float _parseFloat_4 = Float.parseFloat(lSideValue);
                  float _parseFloat_5 = Float.parseFloat(rSideValue);
                  float _multiply = (_parseFloat_4 * _parseFloat_5);
                  result = _multiply;
                } else {
                  boolean _equals_3 = operator.equals("/");
                  if (_equals_3) {
                    float _parseFloat_6 = Float.parseFloat(lSideValue);
                    float _parseFloat_7 = Float.parseFloat(rSideValue);
                    float _divide = (_parseFloat_6 / _parseFloat_7);
                    result = _divide;
                  }
                }
              }
            }
            newFieldData.add(Float.toString(result));
          }
        }
      } else {
        String rSideValue = rData.get(0);
        for (int i = 0; (i < lData.size()); i++) {
          {
            String lSideValue_1 = lData.get(i);
            float result = ((float) 0);
            boolean _equals = operator.equals("+");
            if (_equals) {
              float _parseFloat = Float.parseFloat(lSideValue_1);
              float _parseFloat_1 = Float.parseFloat(rSideValue);
              float _plus = (_parseFloat + _parseFloat_1);
              result = _plus;
            } else {
              boolean _equals_1 = operator.equals("-");
              if (_equals_1) {
                float _parseFloat_2 = Float.parseFloat(lSideValue_1);
                float _parseFloat_3 = Float.parseFloat(rSideValue);
                float _minus = (_parseFloat_2 - _parseFloat_3);
                result = _minus;
              } else {
                boolean _equals_2 = operator.equals("*");
                if (_equals_2) {
                  float _parseFloat_4 = Float.parseFloat(lSideValue_1);
                  float _parseFloat_5 = Float.parseFloat(rSideValue);
                  float _multiply = (_parseFloat_4 * _parseFloat_5);
                  result = _multiply;
                } else {
                  boolean _equals_3 = operator.equals("/");
                  if (_equals_3) {
                    float _parseFloat_6 = Float.parseFloat(lSideValue_1);
                    float _parseFloat_7 = Float.parseFloat(rSideValue);
                    float _divide = (_parseFloat_6 / _parseFloat_7);
                    result = _divide;
                  }
                }
              }
            }
            newFieldData.add(Float.toString(result));
          }
        }
      }
    } else {
      for (int i = 0; (i < lData.size()); i++) {
        {
          String lSideValue_1 = lData.get(i);
          String rSideValue_1 = rData.get(i);
          float result = ((float) 0);
          boolean _equals = operator.equals("+");
          if (_equals) {
            float _parseFloat = Float.parseFloat(lSideValue_1);
            float _parseFloat_1 = Float.parseFloat(rSideValue_1);
            float _plus = (_parseFloat + _parseFloat_1);
            result = _plus;
          } else {
            boolean _equals_1 = operator.equals("-");
            if (_equals_1) {
              float _parseFloat_2 = Float.parseFloat(lSideValue_1);
              float _parseFloat_3 = Float.parseFloat(rSideValue_1);
              float _minus = (_parseFloat_2 - _parseFloat_3);
              result = _minus;
            } else {
              boolean _equals_2 = operator.equals("*");
              if (_equals_2) {
                float _parseFloat_4 = Float.parseFloat(lSideValue_1);
                float _parseFloat_5 = Float.parseFloat(rSideValue_1);
                float _multiply = (_parseFloat_4 * _parseFloat_5);
                result = _multiply;
              } else {
                boolean _equals_3 = operator.equals("/");
                if (_equals_3) {
                  float _parseFloat_6 = Float.parseFloat(lSideValue_1);
                  float _parseFloat_7 = Float.parseFloat(rSideValue_1);
                  float _divide = (_parseFloat_6 / _parseFloat_7);
                  result = _divide;
                }
              }
            }
          }
          newFieldData.add(Float.toString(result));
        }
      }
    }
    return newFieldData;
  }
  
  public ArrayList<String> MathOperationAlgorithm(final MathOperation mainOp, final HashMap<String, ArrayList<String>> csvData) {
    HashMap<MathOperation, Object> formulaMap = new HashMap<MathOperation, Object>();
    ArrayList<String> newFieldData = new ArrayList<String>();
    int mainColRef = 0;
    PreprocessingStep lSide = mainOp.getLside();
    PreprocessingStep rSide = mainOp.getRside();
    MathOperator operator = mainOp.getOperator();
    MathOperation currentOp = mainOp;
    HashMap<String, Object> operation = new HashMap<String, Object>();
    operation.put("l", lSide);
    operation.put("o", operator.getLiteral());
    operation.put("r", rSide);
    operation.put("isMapped", Boolean.valueOf(false));
    formulaMap.put(mainOp, operation);
    boolean status1 = false;
    boolean status2 = false;
    if (((lSide instanceof MathOperation) || (rSide instanceof MathOperation))) {
      while ((status1 == false)) {
        {
          MathOperation prevOp = currentOp;
          Boolean lState = ((Boolean) Boolean.valueOf(false));
          Boolean rState = ((Boolean) Boolean.valueOf(false));
          boolean _containsKey = formulaMap.containsKey(currentOp.getLside());
          if (_containsKey) {
            Object _get = formulaMap.get(currentOp.getLside());
            Object _get_1 = ((HashMap<String, Object>) _get).get("isMapped");
            lState = ((Boolean) _get_1);
          }
          boolean _containsKey_1 = formulaMap.containsKey(currentOp.getRside());
          if (_containsKey_1) {
            Object _get_2 = formulaMap.get(currentOp.getRside());
            Object _get_3 = ((HashMap<String, Object>) _get_2).get("isMapped");
            rState = ((Boolean) _get_3);
          }
          if (((currentOp.getLside() instanceof MathOperation) && ((lState).booleanValue() == false))) {
            PreprocessingStep _lside = currentOp.getLside();
            currentOp = ((MathOperation) _lside);
          } else {
            if (((currentOp.getRside() instanceof MathOperation) && ((rState).booleanValue() == false))) {
              PreprocessingStep _rside = currentOp.getRside();
              currentOp = ((MathOperation) _rside);
            } else {
              if (((((lState).booleanValue() && (rState).booleanValue()) || ((currentOp.getLside() instanceof ColReference) && (rState).booleanValue())) || ((lState).booleanValue() && (!(currentOp.getRside() instanceof ColReference))))) {
                if (((currentOp.getLside() instanceof MathOperation) && (currentOp.getRside() instanceof MathOperation))) {
                  Object lSideOperation = formulaMap.get(currentOp.getLside());
                  Object rSideOperation = formulaMap.get(currentOp.getRside());
                  ArrayList<String> preprocess_data = this.computeColsOperation(((HashMap<String, Object>) lSideOperation).get("preprocess_data"), currentOp.getOperator().getLiteral(), ((HashMap<String, Object>) rSideOperation).get("preprocess_data"), csvData);
                  Object _get_4 = formulaMap.get(currentOp);
                  HashMap<String, Object> mainData = ((HashMap<String, Object>) _get_4);
                  mainData.put("preprocess_data", preprocess_data);
                  formulaMap.put(currentOp, mainData);
                } else {
                  PreprocessingStep _lside_1 = currentOp.getLside();
                  if ((_lside_1 instanceof MathOperation)) {
                    Object lSideOperation_1 = formulaMap.get(currentOp.getLside());
                    PreprocessingStep _rside_1 = currentOp.getRside();
                    String rSideOperation_1 = ((ColReference) _rside_1).getTarget();
                    ArrayList<String> preprocess_data_1 = this.computeColsOperation(((HashMap<String, Object>) lSideOperation_1).get("preprocess_data"), currentOp.getOperator().getLiteral(), rSideOperation_1, csvData);
                    Object _get_5 = formulaMap.get(currentOp);
                    HashMap<String, Object> mainData_1 = ((HashMap<String, Object>) _get_5);
                    mainData_1.put("preprocess_data", preprocess_data_1);
                    formulaMap.put(currentOp, mainData_1);
                  } else {
                    PreprocessingStep _lside_2 = currentOp.getLside();
                    String lSideOperation_2 = ((ColReference) _lside_2).getTarget();
                    Object rSideOperation_2 = formulaMap.get(currentOp.getRside());
                    ArrayList<String> preprocess_data_2 = this.computeColsOperation(lSideOperation_2, currentOp.getOperator().getLiteral(), ((HashMap<String, Object>) rSideOperation_2).get("preprocess_data"), csvData);
                    Object _get_6 = formulaMap.get(currentOp);
                    HashMap<String, Object> mainData_2 = ((HashMap<String, Object>) _get_6);
                    mainData_2.put("preprocess_data", preprocess_data_2);
                    formulaMap.put(currentOp, mainData_2);
                  }
                }
                status1 = true;
              }
            }
          }
          PreprocessingStep currentLSide = currentOp.getLside();
          PreprocessingStep currentRSide = currentOp.getRside();
          MathOperator currentOperator = currentOp.getOperator();
          HashMap<String, Object> _hashMap = new HashMap<String, Object>();
          operation = _hashMap;
          operation.put("l", currentLSide);
          operation.put("o", currentOperator.getLiteral());
          operation.put("r", currentRSide);
          operation.put("parent", prevOp);
          if ((((currentLSide instanceof ColReference) || (currentLSide instanceof StatisticalOperation)) && ((currentRSide instanceof ColReference) || (currentRSide instanceof StatisticalOperation)))) {
            operation.put("isMapped", Boolean.valueOf(true));
            Object l = new Object();
            Object r = new Object();
            if (((currentLSide instanceof ColReference) && (currentRSide instanceof ColReference))) {
              l = ((ColReference) currentLSide).getTarget();
              r = ((ColReference) currentRSide).getTarget();
            } else {
              if (((currentLSide instanceof StatisticalOperation) && (currentRSide instanceof StatisticalOperation))) {
                l = currentLSide;
                r = currentRSide;
              } else {
                if ((currentRSide instanceof StatisticalOperation)) {
                  l = ((ColReference) currentLSide).getTarget();
                  r = currentRSide;
                } else {
                  l = currentLSide;
                  r = ((ColReference) currentRSide).getTarget();
                }
              }
            }
            ArrayList<String> preprocess_data_3 = this.computeColsOperation(l, currentOperator.getLiteral(), r, csvData);
            operation.put("preprocess_data", preprocess_data_3);
            formulaMap.put(currentOp, operation);
            Object mainlSide = formulaMap.get(mainOp.getLside());
            status2 = false;
            while ((status2 == false)) {
              {
                Object _get_7 = formulaMap.get(currentOp);
                HashMap<String, Object> parentOperation = ((HashMap<String, Object>) _get_7);
                Object parentObject = parentOperation.get("parent");
                Object _get_8 = formulaMap.get(parentOperation.get("parent"));
                parentOperation = ((HashMap<String, Object>) _get_8);
                boolean _equals = Objects.equal(currentOp, mainOp);
                if (_equals) {
                  status2 = true;
                } else {
                  Object _get_9 = parentOperation.get("isMapped");
                  boolean _equals_1 = ((((Boolean) _get_9)).booleanValue() == true);
                  if (_equals_1) {
                    Object _get_10 = parentOperation.get("parent");
                    currentOp = ((MathOperation) _get_10);
                    PreprocessingStep _lside_3 = currentOp.getLside();
                    if ((_lside_3 instanceof MathOperation)) {
                      Object _get_11 = formulaMap.get(currentOp.getLside());
                      Object _get_12 = ((HashMap<String, Object>) _get_11).get("isMapped");
                      lState = ((Boolean) _get_12);
                      if (((lState).booleanValue() == false)) {
                        PreprocessingStep _lside_4 = currentOp.getLside();
                        currentOp = ((MathOperation) _lside_4);
                      }
                    }
                    PreprocessingStep _rside_2 = currentOp.getRside();
                    if ((_rside_2 instanceof MathOperation)) {
                      PreprocessingStep _rside_3 = currentOp.getRside();
                      Object _get_13 = formulaMap.get(((MathOperation) _rside_3));
                      Object _get_14 = ((HashMap<String, Object>) _get_13).get("isMapped");
                      rState = ((Boolean) _get_14);
                      if (((rState).booleanValue() == false)) {
                        PreprocessingStep _rside_4 = currentOp.getRside();
                        currentOp = ((MathOperation) _rside_4);
                      }
                    }
                  } else {
                    currentOp = ((MathOperation) parentObject);
                    status2 = true;
                  }
                }
              }
            }
          } else {
            boolean _containsKey_2 = formulaMap.containsKey(currentOp);
            if (_containsKey_2) {
              Object _get_7 = formulaMap.get(currentOp);
              operation = ((HashMap<String, Object>) _get_7);
              Object lSideOperation_3 = new Object();
              Object rSideOperation_3 = new Object();
              int nbOperation = 0;
              Object _get_8 = operation.get("l");
              if ((_get_8 instanceof MathOperation)) {
                lSideOperation_3 = formulaMap.get(operation.get("l"));
                nbOperation++;
              } else {
                Object _get_9 = operation.get("l");
                if ((_get_9 instanceof ColReference)) {
                  Object _get_10 = operation.get("l");
                  lSideOperation_3 = ((ColReference) _get_10);
                }
              }
              Object _get_11 = operation.get("r");
              if ((_get_11 instanceof MathOperation)) {
                Object _get_12 = formulaMap.get(operation.get("r"));
                rSideOperation_3 = ((HashMap<String, Object>) _get_12);
                nbOperation++;
              } else {
                Object _get_13 = operation.get("r");
                if ((_get_13 instanceof ColReference)) {
                  rSideOperation_3 = operation.get("r");
                }
              }
              Object _get_14 = operation.get("o");
              String operationOperator = ((String) _get_14);
              if ((nbOperation == 2)) {
                if ((((HashMap<String, Object>) lSideOperation_3).containsKey("preprocess_data") && ((HashMap<String, Object>) rSideOperation_3).containsKey("preprocess_data"))) {
                  Object _get_15 = ((HashMap<String, Object>) lSideOperation_3).get("preprocess_data");
                  Object _get_16 = ((HashMap<String, Object>) rSideOperation_3).get("preprocess_data");
                  ArrayList<String> preprocess_data_4 = this.computeColsOperation(((ArrayList<String>) _get_15), operationOperator, ((ArrayList<String>) _get_16), csvData);
                  operation.put("preprocess_data", preprocess_data_4);
                  operation.put("isMapped", Boolean.valueOf(true));
                  Object _get_17 = operation.get("parent");
                  currentOp = ((MathOperation) _get_17);
                }
              } else {
                if ((nbOperation == 1)) {
                  Object _get_18 = operation.get("l");
                  if ((_get_18 instanceof ColReference)) {
                    Object _get_19 = ((HashMap<String, Object>) rSideOperation_3).get("preprocess_data");
                    ArrayList<String> preprocess_data_5 = this.computeColsOperation(((ColReference) lSideOperation_3).getTarget(), operationOperator, ((ArrayList<String>) _get_19), csvData);
                    operation.put("preprocess_data", preprocess_data_5);
                    operation.put("isMapped", Boolean.valueOf(true));
                    Object _get_20 = operation.get("parent");
                    currentOp = ((MathOperation) _get_20);
                  } else {
                    Object _get_21 = ((HashMap<String, Object>) lSideOperation_3).get("preprocess_data");
                    ArrayList<String> preprocess_data_6 = this.computeColsOperation(((ArrayList<String>) _get_21), operationOperator, ((ColReference) rSideOperation_3).getTarget(), csvData);
                    operation.put("preprocess_data", preprocess_data_6);
                    operation.put("isMapped", Boolean.valueOf(true));
                    Object _get_22 = operation.get("parent");
                    currentOp = ((MathOperation) _get_22);
                  }
                } else {
                  if ((nbOperation == 0)) {
                    ArrayList<String> preprocess_data_7 = this.computeColsOperation(((ColReference) lSideOperation_3).getTarget(), operationOperator, ((ColReference) rSideOperation_3).getTarget(), csvData);
                    operation.put("preprocess_data", preprocess_data_7);
                    operation.put("isMapped", Boolean.valueOf(true));
                  } else {
                    operation.put("isMapped", Boolean.valueOf(false));
                  }
                }
              }
            } else {
              operation.put("isMapped", Boolean.valueOf(false));
              formulaMap.put(currentOp, operation);
            }
          }
        }
      }
    } else {
      if (((lSide instanceof StatisticalOperation) && (rSide instanceof StatisticalOperation))) {
        ArrayList<String> lStat = this.computeStatisticOperation(((StatisticalOperation) lSide).getColreference().getTarget(), ((StatisticalOperation) lSide).getOperator().getLiteral(), csvData);
        ArrayList<String> rStat = this.computeStatisticOperation(((StatisticalOperation) rSide).getColreference().getTarget(), ((StatisticalOperation) rSide).getOperator().getLiteral(), csvData);
        ArrayList<String> preprocess_data = new ArrayList<String>();
        boolean _equals = mainOp.getOperator().getLiteral().equals("+");
        if (_equals) {
          float _parseFloat = Float.parseFloat(lStat.get(0));
          float _parseFloat_1 = Float.parseFloat(rStat.get(0));
          preprocess_data.add(Float.valueOf((_parseFloat + _parseFloat_1)).toString());
        } else {
          boolean _equals_1 = mainOp.getOperator().getLiteral().equals("-");
          if (_equals_1) {
            float _parseFloat_2 = Float.parseFloat(lStat.get(0));
            float _parseFloat_3 = Float.parseFloat(rStat.get(0));
            preprocess_data.add(Float.valueOf((_parseFloat_2 - _parseFloat_3)).toString());
          } else {
            boolean _equals_2 = mainOp.getOperator().getLiteral().equals("*");
            if (_equals_2) {
              float _parseFloat_4 = Float.parseFloat(lStat.get(0));
              float _parseFloat_5 = Float.parseFloat(rStat.get(0));
              preprocess_data.add(Float.valueOf((_parseFloat_4 * _parseFloat_5)).toString());
            } else {
              float _parseFloat_6 = Float.parseFloat(lStat.get(0));
              float _parseFloat_7 = Float.parseFloat(rStat.get(0));
              preprocess_data.add(Float.valueOf((_parseFloat_6 / _parseFloat_7)).toString());
            }
          }
        }
        operation.put("preprocess_data", preprocess_data);
        formulaMap.put(mainOp, operation);
      } else {
        if (((lSide instanceof ColReference) && (rSide instanceof ColReference))) {
          Object lSideOperation = operation.get("l");
          Object rSideOperation = operation.get("r");
          Object _get = operation.get("o");
          String operationOperator = ((String) _get);
          ArrayList<String> preprocess_data_1 = this.computeColsOperation(((ColReference) lSideOperation).getTarget(), operationOperator, ((ColReference) rSideOperation).getTarget(), csvData);
          operation.put("preprocess_data", preprocess_data_1);
          formulaMap.put(mainOp, operation);
        } else {
          if ((lSide instanceof StatisticalOperation)) {
            Object lSideOperation_1 = operation.get("l");
            Object rSideOperation_1 = operation.get("r");
            Object _get_1 = operation.get("o");
            String operationOperator_1 = ((String) _get_1);
            ArrayList<String> preprocess_data_2 = this.computeColsOperation(lSideOperation_1, operationOperator_1, ((ColReference) rSideOperation_1).getTarget(), csvData);
            operation.put("preprocess_data", preprocess_data_2);
            formulaMap.put(mainOp, operation);
          } else {
            Object lSideOperation_2 = operation.get("l");
            Object rSideOperation_2 = operation.get("r");
            Object _get_2 = operation.get("o");
            String operationOperator_2 = ((String) _get_2);
            ArrayList<String> preprocess_data_3 = this.computeColsOperation(((ColReference) lSideOperation_2).getTarget(), operationOperator_2, rSideOperation_2, csvData);
            operation.put("preprocess_data", preprocess_data_3);
            formulaMap.put(mainOp, operation);
          }
        }
      }
    }
    Object _get_3 = formulaMap.get(mainOp);
    Object _get_4 = ((HashMap<String, Object>) _get_3).get("preprocess_data");
    newFieldData = ((ArrayList<String>) _get_4);
    return newFieldData;
  }
}
