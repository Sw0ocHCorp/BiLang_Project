// automatically generated by Xtext
grammar ucal3ia.bilang.BiLang with org.eclipse.xtext.common.Terminals

import "http://www.example.org/abstractsyntax" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Task returns Task:
	'Task'name=ID":"
		"load" fileextractor+=FileExtractor (datafiltering+=DataFiltering (datafiltering+=DataFiltering)*)?
		(fileextractor+=FileExtractor (datafiltering+=DataFiltering (datafiltering+=DataFiltering)*)?)* 
		'dashboard:' dashboard=DashBoard;

FileExtractor returns FileExtractor:
	name=EString "=>" path=EString ("null replacement->" nullreplacement+= NullReplacement ("," nullreplacement+=NullReplacement)*)?;


FilteringStep returns FilteringStep:
	QuantitativeFiltering | QualitativeFiltering;

PreprocessingStep returns PreprocessingStep:
	MathOperation | ColReference | StatisticalOperation;

Plot returns Plot:
	BarPlot | LinePlot | DonutPlot | ScatterPlot | PolarPlot | RadarPlot | PiePlot;


EString returns ecore::EString:
	STRING | ID;

DataFiltering returns DataFiltering:
	"->" fileextractor=[FileExtractor|EString]
		(
			('filtering=' filteringstep+=FilteringStep ( "," filteringstep+=FilteringStep)*)?
			('processing=' processingstep+=PreprocessingStep ("," processingstep+=PreprocessingStep)*)?
			("count=" countpreprocessingstep+=CountPreprocessingStep ("," countpreprocessingstep+=CountPreprocessingStep)*)?
		);

CountPreprocessingStep returns CountPreprocessingStep:
	axis= EString "{" ((countqualistatement+=CountQualiStatement)* | (countquantistatement+= CountQuantiStatement)*)  "}=" reference=EString 
;

CountQualiStatement returns CountQualiStatement:
	qualiOperator= QualitativeOperator label= EString "->" statement=EString
;

CountQuantiStatement returns CountQuantiStatement:
	 ((quantiOperator= QuantitativeOperator rSide=EFloat) | (lSide=EFloat rangeOperator= RangeOperator rSide=EFloat)) "->" statement=EString
;


DashBoard returns DashBoard:
	name=EString "=>" (fileextractor+=[FileExtractor|EString] 
		'plots' '{' 
			plot+=Plot 
			(plot+=Plot)* 
			'}')+ ;
	
NullReplacement returns NullReplacement:
	colName= EString "=" (label= EString |  statisticaloperation= StatisticalOperation) ;


QuantitativeFiltering returns QuantitativeFiltering:
	{QuantitativeFiltering}
	axis= EString operator= QuantitativeOperator values= EFloat;

QualitativeFiltering returns QualitativeFiltering:
	{QualitativeFiltering}
	axis= EString operator= QualitativeOperator labels= EString;

MathOperation returns MathOperation:
	(newColName= EString "=")? ("(")? 'l' lside=PreprocessingStep operator=MathOperator 'r' rside=PreprocessingStep (")")?;


ColReference returns ColReference:
	{ColReference}
	target= EString;

StatisticalOperation returns StatisticalOperation:
	operator=StatisticalOperator"("colreference=ColReference")";

EFloat returns ecore::EFloat:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

EInt returns ecore::EInt:
	'-'? INT;

BarPlot returns BarPlot:
	{BarPlot}
	'bar' name=ID "->" 'xAx' xAxis=EString 'yA' yAxis=EString ('loc' location=EInt)? ('colors' colors=EString)? ('thickness' thickness=EFloat)?;

LinePlot returns LinePlot:
	{LinePlot}
	'line' name=ID "->" 'xAx' xAxis=EString 'yA' yAxis=EString ('loc' location=EInt)? ('colors' colors=EString)? ('thickness' thickness=EFloat)?;

DonutPlot returns DonutPlot:
	 'donut' name=ID "->"("countID" countID=EString | ('xAx' xAxis=EString 'yA' yAxis=EString)) ('loc' location=EInt)? ('colors' colors=EString)? ('thickness' thickness=EFloat)?;

PiePlot returns PiePlot: 
	'pie' name=ID "->" ("countID" countID=EString | ('xAx' xAxis=EString 'yA' yAxis=EString)) ('loc' location=EInt)? ('colors' colors=EString)? ('thickness' thickness=EFloat)?
;

PolarPlot returns PolarPlot:
	'polar' name=ID "->" 'xAx' xAxis=EString 'yA' yAxis=EString ('loc' location=EInt)? ('colors' colors=EString)? ('thickness' thickness=EFloat)? 
;

ScatterPlot returns ScatterPlot:
	'scatter' name=ID "->" 'xAx' xAxis=EString 'yA' yAxis=EString ('loc' location=EInt)? ('colors' colors=EString)? ('thickness' thickness=EFloat)? 
;

RadarPlot returns RadarPlot:
	'radar' name=ID "->" 'xAx' xAxis=EString 'yA' yAxis=EString ('loc' location=EInt)? ('colors' colors=EString)? ('thickness' thickness=EFloat)? 
;

enum MathOperator returns MathOperator:
				PLUS = '+' | MINUS = '-' | MULTIPLY = '*' | DIVIDING = '/';

enum StatisticalOperator returns StatisticalOperator:
				MEAN = 'mean' | MEDIAN = 'median' | STD = 'std';
				
enum QualitativeOperator returns QualitativeOperator:
	EQUALS= "= " | NOT= "!= "
;

enum RangeOperator:
	LR_INCLUSION= "[]" | LR_EXCLUSION= "][" | L_INCLUSION= "[[" | R_INCLUSION= "]]"
;

enum QuantitativeOperator returns QuantitativeOperator:
	EQUAL= "=" | INFERIOR= "<" | SUPERIOR= ">" | INF_EQUAL= "<=" | SUP_EQUAL= ">="
;