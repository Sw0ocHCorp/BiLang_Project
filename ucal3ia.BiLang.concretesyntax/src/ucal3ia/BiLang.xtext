// automatically generated by Xtext
grammar ucal3ia.BiLang with org.eclipse.xtext.common.Terminals

import "http://www.example.org/BiLang" 
import "http://www.eclipse.org/emf/2003/XMLType" as type
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Task returns Task:
	'Task'name=ID":"
		"load" fileextractor+=FileExtractor (datafiltering+=DataFiltering)?
		(fileextractor+= FileExtractor (datafiltering+= DataFiltering)?)* 
		'[dashboard:' dashboard+=DashBoard (dashboard+=DashBoard)* ']';

FileExtractor returns FileExtractor:
	CsvExtractor | ExcelExtractor;



FilteringSteps returns FilteringSteps:
	QuantitativeFiltering | QualitativeFiltering;

PreprocessingSteps returns PreprocessingSteps:
	MathOperation | StatisticalOperation | colReference;



ID0 returns type::ID:
	'ID' /* TODO: implement this rule and an appropriate IValueConverter */;

DataFiltering returns DataFiltering:
	'DataFiltering'
	'{'
		('name' name=ID0)?
		'fileextractor' fileextractor=[FileExtractor|EString]
		'filteringsteps' '{' filteringsteps+=FilteringSteps ( "," filteringsteps+=FilteringSteps)* '}' 
		('preprocessingsteps' '{' preprocessingsteps+=PreprocessingSteps ( "," preprocessingsteps+=PreprocessingSteps)* '}' )?
	'}';

DashBoard returns DashBoard:
	{DashBoard}
	'DashBoard'
	'{'
		('name' name=ID0)?
		plot+= Plot ((plot+= Plot)*)?
	'}';

Plot returns Plot:
	LinePlot | BarPlot 
;


EString returns ecore::EString:
	STRING | ID;

CsvExtractor returns CsvExtractor:
	{CsvExtractor}
	name=ID".csv"
	'{'
		"path" path=EString
	'}';

ExcelExtractor returns ExcelExtractor:
	{ExcelExtractor}
	name=ID".xlsx"
	'{'
		"path" path=EString
	'}';

QuantitativeFiltering returns QuantitativeFiltering:
	{QuantitativeFiltering}
	"quanti axis->" axis= EString "value" targetValue= EString;

QualitativeFiltering returns QualitativeFiltering:
	{QualitativeFiltering}
	"quali axis->" axis= EString "label" targetLabel= EString;

MathOperation returns MathOperation:
	'l' lside=PreprocessingSteps operator=MathOperator 'r' rside=PreprocessingSteps;

StatisticalOperation returns StatisticalOperation:
	{StatisticalOperation}
	operator= StatisticalOperator"("preprocessingsteps=PreprocessingSteps")";

colReference returns colReference:
	{colReference}
		'column' colLabel=EString;

enum MathOperator returns MathOperator:
				PLUS = 'PLUS' | MINUS = 'MINUS' | MULTIPLY = 'MULTIPLY' | DIVIDING = 'DIVIDING';

enum StatisticalOperator returns StatisticalOperator:
				MEAN = 'MEAN' | MEDIAN = 'MEDIAN' | STD = 'STD';

LinePlot returns LinePlot:
	{LinePlot}
	'line' name=ID "->" 'xAx' xAxis=EString 'yA' yAxis=EString ('loc' location=EString)? ('colors' color=EString)? ('thickness' thickness=EFloat)?;

BarPlot returns BarPlot:
	{BarPlot}
	'bar' name=ID "->" 'xAx' xAxis=EString 'yA' yAxis=EString ('loc' location=EString)? ('colors' color=EString)? ('thickness' thickness=EFloat)?;

EFloat returns ecore::EFloat:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
