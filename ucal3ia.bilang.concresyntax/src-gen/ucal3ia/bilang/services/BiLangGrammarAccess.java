/*
 * generated by Xtext 2.25.0
 */
package ucal3ia.bilang.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BiLangGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ucal3ia.bilang.BiLang.Task");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLoadKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFileextractorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFileextractorFileExtractorParserRuleCall_4_0 = (RuleCall)cFileextractorAssignment_4.eContents().get(0);
		private final Assignment cDatafilteringAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDatafilteringDataFilteringParserRuleCall_5_0 = (RuleCall)cDatafilteringAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cFileextractorAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cFileextractorFileExtractorParserRuleCall_6_0_0 = (RuleCall)cFileextractorAssignment_6_0.eContents().get(0);
		private final Assignment cDatafilteringAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cDatafilteringDataFilteringParserRuleCall_6_1_0 = (RuleCall)cDatafilteringAssignment_6_1.eContents().get(0);
		private final Keyword cDashboardKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cDashboardAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cDashboardDashBoardParserRuleCall_8_0 = (RuleCall)cDashboardAssignment_8.eContents().get(0);
		private final Assignment cDashboardAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cDashboardDashBoardParserRuleCall_9_0 = (RuleCall)cDashboardAssignment_9.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Task returns Task:
		//    'Task'name=ID":"
		//        "load" fileextractor+=FileExtractor (datafiltering+=DataFiltering)?
		//        (fileextractor+= FileExtractor (datafiltering+= DataFiltering)?)*
		//        '[dashboard:' dashboard+=DashBoard (dashboard+=DashBoard)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'Task'name=ID":"
		//    "load" fileextractor+=FileExtractor (datafiltering+=DataFiltering)?
		//    (fileextractor+= FileExtractor (datafiltering+= DataFiltering)?)*
		//    '[dashboard:' dashboard+=DashBoard (dashboard+=DashBoard)* ']'
		public Group getGroup() { return cGroup; }
		
		//'Task'
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//"load"
		public Keyword getLoadKeyword_3() { return cLoadKeyword_3; }
		
		//fileextractor+=FileExtractor
		public Assignment getFileextractorAssignment_4() { return cFileextractorAssignment_4; }
		
		//FileExtractor
		public RuleCall getFileextractorFileExtractorParserRuleCall_4_0() { return cFileextractorFileExtractorParserRuleCall_4_0; }
		
		//(datafiltering+=DataFiltering)?
		public Assignment getDatafilteringAssignment_5() { return cDatafilteringAssignment_5; }
		
		//DataFiltering
		public RuleCall getDatafilteringDataFilteringParserRuleCall_5_0() { return cDatafilteringDataFilteringParserRuleCall_5_0; }
		
		//(fileextractor+= FileExtractor (datafiltering+= DataFiltering)?)*
		public Group getGroup_6() { return cGroup_6; }
		
		//fileextractor+= FileExtractor
		public Assignment getFileextractorAssignment_6_0() { return cFileextractorAssignment_6_0; }
		
		//FileExtractor
		public RuleCall getFileextractorFileExtractorParserRuleCall_6_0_0() { return cFileextractorFileExtractorParserRuleCall_6_0_0; }
		
		//(datafiltering+= DataFiltering)?
		public Assignment getDatafilteringAssignment_6_1() { return cDatafilteringAssignment_6_1; }
		
		//DataFiltering
		public RuleCall getDatafilteringDataFilteringParserRuleCall_6_1_0() { return cDatafilteringDataFilteringParserRuleCall_6_1_0; }
		
		//'[dashboard:'
		public Keyword getDashboardKeyword_7() { return cDashboardKeyword_7; }
		
		//dashboard+=DashBoard
		public Assignment getDashboardAssignment_8() { return cDashboardAssignment_8; }
		
		//DashBoard
		public RuleCall getDashboardDashBoardParserRuleCall_8_0() { return cDashboardDashBoardParserRuleCall_8_0; }
		
		//(dashboard+=DashBoard)*
		public Assignment getDashboardAssignment_9() { return cDashboardAssignment_9; }
		
		//DashBoard
		public RuleCall getDashboardDashBoardParserRuleCall_9_0() { return cDashboardDashBoardParserRuleCall_9_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_10() { return cRightSquareBracketKeyword_10; }
	}
	public class FileExtractorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ucal3ia.bilang.BiLang.FileExtractor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCsvExtractorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExcelExtractorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FileExtractor returns FileExtractor:
		//    CsvExtractor | ExcelExtractor;
		@Override public ParserRule getRule() { return rule; }
		
		//CsvExtractor | ExcelExtractor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CsvExtractor
		public RuleCall getCsvExtractorParserRuleCall_0() { return cCsvExtractorParserRuleCall_0; }
		
		//ExcelExtractor
		public RuleCall getExcelExtractorParserRuleCall_1() { return cExcelExtractorParserRuleCall_1; }
	}
	public class FilteringStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ucal3ia.bilang.BiLang.FilteringStep");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cQuantitativeFilteringParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQualitativeFilteringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FilteringStep returns FilteringStep:
		//    QuantitativeFiltering | QualitativeFiltering;
		@Override public ParserRule getRule() { return rule; }
		
		//QuantitativeFiltering | QualitativeFiltering
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//QuantitativeFiltering
		public RuleCall getQuantitativeFilteringParserRuleCall_0() { return cQuantitativeFilteringParserRuleCall_0; }
		
		//QualitativeFiltering
		public RuleCall getQualitativeFilteringParserRuleCall_1() { return cQualitativeFilteringParserRuleCall_1; }
	}
	public class PreprocessingStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ucal3ia.bilang.BiLang.PreprocessingStep");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMathOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cColReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStatisticalOperationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//PreprocessingStep returns PreprocessingStep:
		//    MathOperation | ColReference | StatisticalOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//MathOperation | ColReference | StatisticalOperation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MathOperation
		public RuleCall getMathOperationParserRuleCall_0() { return cMathOperationParserRuleCall_0; }
		
		//ColReference
		public RuleCall getColReferenceParserRuleCall_1() { return cColReferenceParserRuleCall_1; }
		
		//StatisticalOperation
		public RuleCall getStatisticalOperationParserRuleCall_2() { return cStatisticalOperationParserRuleCall_2; }
	}
	public class PlotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ucal3ia.bilang.BiLang.Plot");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBarPlotParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLinePlotParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Plot returns Plot:
		//    BarPlot | LinePlot;
		@Override public ParserRule getRule() { return rule; }
		
		//BarPlot | LinePlot
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BarPlot
		public RuleCall getBarPlotParserRuleCall_0() { return cBarPlotParserRuleCall_0; }
		
		//LinePlot
		public RuleCall getLinePlotParserRuleCall_1() { return cLinePlotParserRuleCall_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ucal3ia.bilang.BiLang.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class DataFilteringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ucal3ia.bilang.BiLang.DataFiltering");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFilterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFileextractorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cFileextractorFileExtractorCrossReference_3_0 = (CrossReference)cFileextractorAssignment_3.eContents().get(0);
		private final RuleCall cFileextractorFileExtractorEStringParserRuleCall_3_0_1 = (RuleCall)cFileextractorFileExtractorCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cProcessingStepKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cProcessingstepAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cProcessingstepPreprocessingStepParserRuleCall_4_1_0 = (RuleCall)cProcessingstepAssignment_4_1.eContents().get(0);
		private final Assignment cProcessingstepAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cProcessingstepPreprocessingStepParserRuleCall_4_2_0 = (RuleCall)cProcessingstepAssignment_4_2.eContents().get(0);
		private final Keyword cFilteringStepKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cFilteringstepAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFilteringstepFilteringStepParserRuleCall_6_0 = (RuleCall)cFilteringstepAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cFilteringstepAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cFilteringstepFilteringStepParserRuleCall_7_1_0 = (RuleCall)cFilteringstepAssignment_7_1.eContents().get(0);
		
		//DataFiltering returns DataFiltering:
		//    "filter"
		//    name=EString "=>" fileextractor=[FileExtractor|EString]
		//        ('processing step=' processingstep+=PreprocessingStep ( processingstep+=PreprocessingStep)* )?
		//        'filtering step=' filteringstep+=FilteringStep ( "," filteringstep+=FilteringStep)* ;
		@Override public ParserRule getRule() { return rule; }
		
		//"filter"
		//name=EString "=>" fileextractor=[FileExtractor|EString]
		//    ('processing step=' processingstep+=PreprocessingStep ( processingstep+=PreprocessingStep)* )?
		//    'filtering step=' filteringstep+=FilteringStep ( "," filteringstep+=FilteringStep)*
		public Group getGroup() { return cGroup; }
		
		//"filter"
		public Keyword getFilterKeyword_0() { return cFilterKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_2() { return cEqualsSignGreaterThanSignKeyword_2; }
		
		//fileextractor=[FileExtractor|EString]
		public Assignment getFileextractorAssignment_3() { return cFileextractorAssignment_3; }
		
		//[FileExtractor|EString]
		public CrossReference getFileextractorFileExtractorCrossReference_3_0() { return cFileextractorFileExtractorCrossReference_3_0; }
		
		//EString
		public RuleCall getFileextractorFileExtractorEStringParserRuleCall_3_0_1() { return cFileextractorFileExtractorEStringParserRuleCall_3_0_1; }
		
		//('processing step=' processingstep+=PreprocessingStep ( processingstep+=PreprocessingStep)* )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'processing step='
		public Keyword getProcessingStepKeyword_4_0() { return cProcessingStepKeyword_4_0; }
		
		//processingstep+=PreprocessingStep
		public Assignment getProcessingstepAssignment_4_1() { return cProcessingstepAssignment_4_1; }
		
		//PreprocessingStep
		public RuleCall getProcessingstepPreprocessingStepParserRuleCall_4_1_0() { return cProcessingstepPreprocessingStepParserRuleCall_4_1_0; }
		
		//( processingstep+=PreprocessingStep)*
		public Assignment getProcessingstepAssignment_4_2() { return cProcessingstepAssignment_4_2; }
		
		//PreprocessingStep
		public RuleCall getProcessingstepPreprocessingStepParserRuleCall_4_2_0() { return cProcessingstepPreprocessingStepParserRuleCall_4_2_0; }
		
		//'filtering step='
		public Keyword getFilteringStepKeyword_5() { return cFilteringStepKeyword_5; }
		
		//filteringstep+=FilteringStep
		public Assignment getFilteringstepAssignment_6() { return cFilteringstepAssignment_6; }
		
		//FilteringStep
		public RuleCall getFilteringstepFilteringStepParserRuleCall_6_0() { return cFilteringstepFilteringStepParserRuleCall_6_0; }
		
		//( "," filteringstep+=FilteringStep)*
		public Group getGroup_7() { return cGroup_7; }
		
		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//filteringstep+=FilteringStep
		public Assignment getFilteringstepAssignment_7_1() { return cFilteringstepAssignment_7_1; }
		
		//FilteringStep
		public RuleCall getFilteringstepFilteringStepParserRuleCall_7_1_0() { return cFilteringstepFilteringStepParserRuleCall_7_1_0; }
	}
	public class DashBoardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ucal3ia.bilang.BiLang.DashBoard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cEKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cFileextractorAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final CrossReference cFileextractorFileExtractorCrossReference_2_0_1_0 = (CrossReference)cFileextractorAssignment_2_0_1.eContents().get(0);
		private final RuleCall cFileextractorFileExtractorEStringParserRuleCall_2_0_1_0_1 = (RuleCall)cFileextractorFileExtractorCrossReference_2_0_1_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cDfKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cDatafilteringAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final CrossReference cDatafilteringDataFilteringCrossReference_2_1_1_0 = (CrossReference)cDatafilteringAssignment_2_1_1.eContents().get(0);
		private final RuleCall cDatafilteringDataFilteringEStringParserRuleCall_2_1_1_0_1 = (RuleCall)cDatafilteringDataFilteringCrossReference_2_1_1_0.eContents().get(1);
		private final Keyword cPlotsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPlotAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPlotPlotParserRuleCall_5_0 = (RuleCall)cPlotAssignment_5.eContents().get(0);
		private final Assignment cPlotAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPlotPlotParserRuleCall_6_0 = (RuleCall)cPlotAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//DashBoard returns DashBoard:
		//    name=EString "=>" ("e" fileextractor=[FileExtractor|EString] | 'df' datafiltering=[DataFiltering|EString])
		//        'plots' '{'
		//            plot+=Plot
		//            (plot+=Plot)*
		//            '}' ;
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString "=>" ("e" fileextractor=[FileExtractor|EString] | 'df' datafiltering=[DataFiltering|EString])
		//    'plots' '{'
		//        plot+=Plot
		//        (plot+=Plot)*
		//        '}'
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }
		
		//("e" fileextractor=[FileExtractor|EString] | 'df' datafiltering=[DataFiltering|EString])
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//"e" fileextractor=[FileExtractor|EString]
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//"e"
		public Keyword getEKeyword_2_0_0() { return cEKeyword_2_0_0; }
		
		//fileextractor=[FileExtractor|EString]
		public Assignment getFileextractorAssignment_2_0_1() { return cFileextractorAssignment_2_0_1; }
		
		//[FileExtractor|EString]
		public CrossReference getFileextractorFileExtractorCrossReference_2_0_1_0() { return cFileextractorFileExtractorCrossReference_2_0_1_0; }
		
		//EString
		public RuleCall getFileextractorFileExtractorEStringParserRuleCall_2_0_1_0_1() { return cFileextractorFileExtractorEStringParserRuleCall_2_0_1_0_1; }
		
		//'df' datafiltering=[DataFiltering|EString]
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'df'
		public Keyword getDfKeyword_2_1_0() { return cDfKeyword_2_1_0; }
		
		//datafiltering=[DataFiltering|EString]
		public Assignment getDatafilteringAssignment_2_1_1() { return cDatafilteringAssignment_2_1_1; }
		
		//[DataFiltering|EString]
		public CrossReference getDatafilteringDataFilteringCrossReference_2_1_1_0() { return cDatafilteringDataFilteringCrossReference_2_1_1_0; }
		
		//EString
		public RuleCall getDatafilteringDataFilteringEStringParserRuleCall_2_1_1_0_1() { return cDatafilteringDataFilteringEStringParserRuleCall_2_1_1_0_1; }
		
		//'plots'
		public Keyword getPlotsKeyword_3() { return cPlotsKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//plot+=Plot
		public Assignment getPlotAssignment_5() { return cPlotAssignment_5; }
		
		//Plot
		public RuleCall getPlotPlotParserRuleCall_5_0() { return cPlotPlotParserRuleCall_5_0; }
		
		//(plot+=Plot)*
		public Assignment getPlotAssignment_6() { return cPlotAssignment_6; }
		
		//Plot
		public RuleCall getPlotPlotParserRuleCall_6_0() { return cPlotPlotParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class CsvExtractorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ucal3ia.bilang.BiLang.CsvExtractor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCsvExtractorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cCsvKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPathAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPathEStringParserRuleCall_4_0 = (RuleCall)cPathAssignment_4.eContents().get(0);
		
		//CsvExtractor returns CsvExtractor:
		//    {CsvExtractor}
		//    name=EString".csv" "=>" path=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{CsvExtractor}
		//name=EString".csv" "=>" path=EString
		public Group getGroup() { return cGroup; }
		
		//{CsvExtractor}
		public Action getCsvExtractorAction_0() { return cCsvExtractorAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//".csv"
		public Keyword getCsvKeyword_2() { return cCsvKeyword_2; }
		
		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_3() { return cEqualsSignGreaterThanSignKeyword_3; }
		
		//path=EString
		public Assignment getPathAssignment_4() { return cPathAssignment_4; }
		
		//EString
		public RuleCall getPathEStringParserRuleCall_4_0() { return cPathEStringParserRuleCall_4_0; }
	}
	public class ExcelExtractorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ucal3ia.bilang.BiLang.ExcelExtractor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExcelExtractorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cXlsxKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPathAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPathEStringParserRuleCall_4_0 = (RuleCall)cPathAssignment_4.eContents().get(0);
		
		//ExcelExtractor returns ExcelExtractor:
		//    {ExcelExtractor}
		//    name=EString".xlsx" "=>" path=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExcelExtractor}
		//name=EString".xlsx" "=>" path=EString
		public Group getGroup() { return cGroup; }
		
		//{ExcelExtractor}
		public Action getExcelExtractorAction_0() { return cExcelExtractorAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//".xlsx"
		public Keyword getXlsxKeyword_2() { return cXlsxKeyword_2; }
		
		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_3() { return cEqualsSignGreaterThanSignKeyword_3; }
		
		//path=EString
		public Assignment getPathAssignment_4() { return cPathAssignment_4; }
		
		//EString
		public RuleCall getPathEStringParserRuleCall_4_0() { return cPathEStringParserRuleCall_4_0; }
	}
	public class QuantitativeFilteringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ucal3ia.bilang.BiLang.QuantitativeFiltering");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQuantitativeFilteringAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cQuantiAxisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAxisAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAxisEStringParserRuleCall_2_0 = (RuleCall)cAxisAssignment_2.eContents().get(0);
		private final Keyword cValueKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValuesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValuesEStringParserRuleCall_4_0 = (RuleCall)cValuesAssignment_4.eContents().get(0);
		
		//QuantitativeFiltering returns QuantitativeFiltering:
		//    {QuantitativeFiltering}
		//    "quanti axis->" axis= EString "value" values= EString
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{QuantitativeFiltering}
		//"quanti axis->" axis= EString "value" values= EString
		public Group getGroup() { return cGroup; }
		
		//{QuantitativeFiltering}
		public Action getQuantitativeFilteringAction_0() { return cQuantitativeFilteringAction_0; }
		
		//"quanti axis->"
		public Keyword getQuantiAxisKeyword_1() { return cQuantiAxisKeyword_1; }
		
		//axis= EString
		public Assignment getAxisAssignment_2() { return cAxisAssignment_2; }
		
		//EString
		public RuleCall getAxisEStringParserRuleCall_2_0() { return cAxisEStringParserRuleCall_2_0; }
		
		//"value"
		public Keyword getValueKeyword_3() { return cValueKeyword_3; }
		
		//values= EString
		public Assignment getValuesAssignment_4() { return cValuesAssignment_4; }
		
		//EString
		public RuleCall getValuesEStringParserRuleCall_4_0() { return cValuesEStringParserRuleCall_4_0; }
	}
	public class QualitativeFilteringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ucal3ia.bilang.BiLang.QualitativeFiltering");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQualitativeFilteringAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cQualiAxisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAxisAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAxisEStringParserRuleCall_2_0 = (RuleCall)cAxisAssignment_2.eContents().get(0);
		private final Keyword cLabelKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLabelsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLabelsEStringParserRuleCall_4_0 = (RuleCall)cLabelsAssignment_4.eContents().get(0);
		
		//QualitativeFiltering returns QualitativeFiltering:
		//    {QualitativeFiltering}
		//    "quali axis->" axis= EString "label" labels= EString
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{QualitativeFiltering}
		//"quali axis->" axis= EString "label" labels= EString
		public Group getGroup() { return cGroup; }
		
		//{QualitativeFiltering}
		public Action getQualitativeFilteringAction_0() { return cQualitativeFilteringAction_0; }
		
		//"quali axis->"
		public Keyword getQualiAxisKeyword_1() { return cQualiAxisKeyword_1; }
		
		//axis= EString
		public Assignment getAxisAssignment_2() { return cAxisAssignment_2; }
		
		//EString
		public RuleCall getAxisEStringParserRuleCall_2_0() { return cAxisEStringParserRuleCall_2_0; }
		
		//"label"
		public Keyword getLabelKeyword_3() { return cLabelKeyword_3; }
		
		//labels= EString
		public Assignment getLabelsAssignment_4() { return cLabelsAssignment_4; }
		
		//EString
		public RuleCall getLabelsEStringParserRuleCall_4_0() { return cLabelsEStringParserRuleCall_4_0; }
	}
	public class MathOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ucal3ia.bilang.BiLang.MathOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLsideAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLsidePreprocessingStepParserRuleCall_1_0 = (RuleCall)cLsideAssignment_1.eContents().get(0);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorMathOperatorEnumRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Keyword cRKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRsideAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRsidePreprocessingStepParserRuleCall_4_0 = (RuleCall)cRsideAssignment_4.eContents().get(0);
		
		//MathOperation returns MathOperation:
		//    'l' lside=PreprocessingStep operator=MathOperator 'r' rside=PreprocessingStep;
		@Override public ParserRule getRule() { return rule; }
		
		//'l' lside=PreprocessingStep operator=MathOperator 'r' rside=PreprocessingStep
		public Group getGroup() { return cGroup; }
		
		//'l'
		public Keyword getLKeyword_0() { return cLKeyword_0; }
		
		//lside=PreprocessingStep
		public Assignment getLsideAssignment_1() { return cLsideAssignment_1; }
		
		//PreprocessingStep
		public RuleCall getLsidePreprocessingStepParserRuleCall_1_0() { return cLsidePreprocessingStepParserRuleCall_1_0; }
		
		//operator=MathOperator
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }
		
		//MathOperator
		public RuleCall getOperatorMathOperatorEnumRuleCall_2_0() { return cOperatorMathOperatorEnumRuleCall_2_0; }
		
		//'r'
		public Keyword getRKeyword_3() { return cRKeyword_3; }
		
		//rside=PreprocessingStep
		public Assignment getRsideAssignment_4() { return cRsideAssignment_4; }
		
		//PreprocessingStep
		public RuleCall getRsidePreprocessingStepParserRuleCall_4_0() { return cRsidePreprocessingStepParserRuleCall_4_0; }
	}
	public class ColReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ucal3ia.bilang.BiLang.ColReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cColReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetEStringParserRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		
		//ColReference returns ColReference:
		//    {ColReference}
		//    target= EString
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{ColReference}
		//target= EString
		public Group getGroup() { return cGroup; }
		
		//{ColReference}
		public Action getColReferenceAction_0() { return cColReferenceAction_0; }
		
		//target= EString
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//EString
		public RuleCall getTargetEStringParserRuleCall_1_0() { return cTargetEStringParserRuleCall_1_0; }
	}
	public class StatisticalOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ucal3ia.bilang.BiLang.StatisticalOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorStatisticalOperatorEnumRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColreferenceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColreferenceColReferenceParserRuleCall_2_0 = (RuleCall)cColreferenceAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StatisticalOperation returns StatisticalOperation:
		//    operator=StatisticalOperator"("colreference=ColReference")";
		@Override public ParserRule getRule() { return rule; }
		
		//operator=StatisticalOperator"("colreference=ColReference")"
		public Group getGroup() { return cGroup; }
		
		//operator=StatisticalOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//StatisticalOperator
		public RuleCall getOperatorStatisticalOperatorEnumRuleCall_0_0() { return cOperatorStatisticalOperatorEnumRuleCall_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//colreference=ColReference
		public Assignment getColreferenceAssignment_2() { return cColreferenceAssignment_2; }
		
		//ColReference
		public RuleCall getColreferenceColReferenceParserRuleCall_2_0() { return cColreferenceColReferenceParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class EFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ucal3ia.bilang.BiLang.EFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EFloat returns ecore::EFloat:
		//    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT? '.' INT (('E'|'e') '-'? INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//(('E'|'e') '-'? INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//('E'|'e')
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'E'
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }
		
		//'e'
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}
	public class BarPlotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ucal3ia.bilang.BiLang.BarPlot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBarPlotAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cXAxKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cXAxisAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cXAxisEStringParserRuleCall_5_0 = (RuleCall)cXAxisAssignment_5.eContents().get(0);
		private final Keyword cYAKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cYAxisAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cYAxisEStringParserRuleCall_7_0 = (RuleCall)cYAxisAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cLocKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cLocationAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cLocationEStringParserRuleCall_8_1_0 = (RuleCall)cLocationAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cColorsKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cColorAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cColorEStringParserRuleCall_9_1_0 = (RuleCall)cColorAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cThicknessKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cThicknessAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cThicknessEFloatParserRuleCall_10_1_0 = (RuleCall)cThicknessAssignment_10_1.eContents().get(0);
		
		//BarPlot returns BarPlot:
		//    {BarPlot}
		//    'bar' name=ID "->" 'xAx' xAxis=EString 'yA' yAxis=EString ('loc' location=EString)? ('colors' color=EString)? ('thickness' thickness=EFloat)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{BarPlot}
		//'bar' name=ID "->" 'xAx' xAxis=EString 'yA' yAxis=EString ('loc' location=EString)? ('colors' color=EString)? ('thickness' thickness=EFloat)?
		public Group getGroup() { return cGroup; }
		
		//{BarPlot}
		public Action getBarPlotAction_0() { return cBarPlotAction_0; }
		
		//'bar'
		public Keyword getBarKeyword_1() { return cBarKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//'xAx'
		public Keyword getXAxKeyword_4() { return cXAxKeyword_4; }
		
		//xAxis=EString
		public Assignment getXAxisAssignment_5() { return cXAxisAssignment_5; }
		
		//EString
		public RuleCall getXAxisEStringParserRuleCall_5_0() { return cXAxisEStringParserRuleCall_5_0; }
		
		//'yA'
		public Keyword getYAKeyword_6() { return cYAKeyword_6; }
		
		//yAxis=EString
		public Assignment getYAxisAssignment_7() { return cYAxisAssignment_7; }
		
		//EString
		public RuleCall getYAxisEStringParserRuleCall_7_0() { return cYAxisEStringParserRuleCall_7_0; }
		
		//('loc' location=EString)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'loc'
		public Keyword getLocKeyword_8_0() { return cLocKeyword_8_0; }
		
		//location=EString
		public Assignment getLocationAssignment_8_1() { return cLocationAssignment_8_1; }
		
		//EString
		public RuleCall getLocationEStringParserRuleCall_8_1_0() { return cLocationEStringParserRuleCall_8_1_0; }
		
		//('colors' color=EString)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'colors'
		public Keyword getColorsKeyword_9_0() { return cColorsKeyword_9_0; }
		
		//color=EString
		public Assignment getColorAssignment_9_1() { return cColorAssignment_9_1; }
		
		//EString
		public RuleCall getColorEStringParserRuleCall_9_1_0() { return cColorEStringParserRuleCall_9_1_0; }
		
		//('thickness' thickness=EFloat)?
		public Group getGroup_10() { return cGroup_10; }
		
		//'thickness'
		public Keyword getThicknessKeyword_10_0() { return cThicknessKeyword_10_0; }
		
		//thickness=EFloat
		public Assignment getThicknessAssignment_10_1() { return cThicknessAssignment_10_1; }
		
		//EFloat
		public RuleCall getThicknessEFloatParserRuleCall_10_1_0() { return cThicknessEFloatParserRuleCall_10_1_0; }
	}
	public class LinePlotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ucal3ia.bilang.BiLang.LinePlot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLinePlotAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cXAxKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cXAxisAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cXAxisEStringParserRuleCall_5_0 = (RuleCall)cXAxisAssignment_5.eContents().get(0);
		private final Keyword cYAKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cYAxisAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cYAxisEStringParserRuleCall_7_0 = (RuleCall)cYAxisAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cLocKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cLocationAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cLocationEStringParserRuleCall_8_1_0 = (RuleCall)cLocationAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cColorsKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cColorAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cColorEStringParserRuleCall_9_1_0 = (RuleCall)cColorAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cThicknessKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cThicknessAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cThicknessEFloatParserRuleCall_10_1_0 = (RuleCall)cThicknessAssignment_10_1.eContents().get(0);
		
		//LinePlot returns LinePlot:
		//    {LinePlot}
		//    'line' name=ID "->" 'xAx' xAxis=EString 'yA' yAxis=EString ('loc' location=EString)? ('colors' color=EString)? ('thickness' thickness=EFloat)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{LinePlot}
		//'line' name=ID "->" 'xAx' xAxis=EString 'yA' yAxis=EString ('loc' location=EString)? ('colors' color=EString)? ('thickness' thickness=EFloat)?
		public Group getGroup() { return cGroup; }
		
		//{LinePlot}
		public Action getLinePlotAction_0() { return cLinePlotAction_0; }
		
		//'line'
		public Keyword getLineKeyword_1() { return cLineKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//'xAx'
		public Keyword getXAxKeyword_4() { return cXAxKeyword_4; }
		
		//xAxis=EString
		public Assignment getXAxisAssignment_5() { return cXAxisAssignment_5; }
		
		//EString
		public RuleCall getXAxisEStringParserRuleCall_5_0() { return cXAxisEStringParserRuleCall_5_0; }
		
		//'yA'
		public Keyword getYAKeyword_6() { return cYAKeyword_6; }
		
		//yAxis=EString
		public Assignment getYAxisAssignment_7() { return cYAxisAssignment_7; }
		
		//EString
		public RuleCall getYAxisEStringParserRuleCall_7_0() { return cYAxisEStringParserRuleCall_7_0; }
		
		//('loc' location=EString)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'loc'
		public Keyword getLocKeyword_8_0() { return cLocKeyword_8_0; }
		
		//location=EString
		public Assignment getLocationAssignment_8_1() { return cLocationAssignment_8_1; }
		
		//EString
		public RuleCall getLocationEStringParserRuleCall_8_1_0() { return cLocationEStringParserRuleCall_8_1_0; }
		
		//('colors' color=EString)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'colors'
		public Keyword getColorsKeyword_9_0() { return cColorsKeyword_9_0; }
		
		//color=EString
		public Assignment getColorAssignment_9_1() { return cColorAssignment_9_1; }
		
		//EString
		public RuleCall getColorEStringParserRuleCall_9_1_0() { return cColorEStringParserRuleCall_9_1_0; }
		
		//('thickness' thickness=EFloat)?
		public Group getGroup_10() { return cGroup_10; }
		
		//'thickness'
		public Keyword getThicknessKeyword_10_0() { return cThicknessKeyword_10_0; }
		
		//thickness=EFloat
		public Assignment getThicknessAssignment_10_1() { return cThicknessAssignment_10_1; }
		
		//EFloat
		public RuleCall getThicknessEFloatParserRuleCall_10_1_0() { return cThicknessEFloatParserRuleCall_10_1_0; }
	}
	
	public class MathOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ucal3ia.bilang.BiLang.MathOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPLUSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPLUSPLUSKeyword_0_0 = (Keyword)cPLUSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMINUSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMINUSMINUSKeyword_1_0 = (Keyword)cMINUSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMULTIPLYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMULTIPLYMULTIPLYKeyword_2_0 = (Keyword)cMULTIPLYEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDIVIDINGEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDIVIDINGDIVIDINGKeyword_3_0 = (Keyword)cDIVIDINGEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum MathOperator returns MathOperator:
		//                PLUS = 'PLUS' | MINUS = 'MINUS' | MULTIPLY = 'MULTIPLY' | DIVIDING = 'DIVIDING';
		public EnumRule getRule() { return rule; }
		
		//PLUS = 'PLUS' | MINUS = 'MINUS' | MULTIPLY = 'MULTIPLY' | DIVIDING = 'DIVIDING'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PLUS = 'PLUS'
		public EnumLiteralDeclaration getPLUSEnumLiteralDeclaration_0() { return cPLUSEnumLiteralDeclaration_0; }
		
		//'PLUS'
		public Keyword getPLUSPLUSKeyword_0_0() { return cPLUSPLUSKeyword_0_0; }
		
		//MINUS = 'MINUS'
		public EnumLiteralDeclaration getMINUSEnumLiteralDeclaration_1() { return cMINUSEnumLiteralDeclaration_1; }
		
		//'MINUS'
		public Keyword getMINUSMINUSKeyword_1_0() { return cMINUSMINUSKeyword_1_0; }
		
		//MULTIPLY = 'MULTIPLY'
		public EnumLiteralDeclaration getMULTIPLYEnumLiteralDeclaration_2() { return cMULTIPLYEnumLiteralDeclaration_2; }
		
		//'MULTIPLY'
		public Keyword getMULTIPLYMULTIPLYKeyword_2_0() { return cMULTIPLYMULTIPLYKeyword_2_0; }
		
		//DIVIDING = 'DIVIDING'
		public EnumLiteralDeclaration getDIVIDINGEnumLiteralDeclaration_3() { return cDIVIDINGEnumLiteralDeclaration_3; }
		
		//'DIVIDING'
		public Keyword getDIVIDINGDIVIDINGKeyword_3_0() { return cDIVIDINGDIVIDINGKeyword_3_0; }
	}
	public class StatisticalOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ucal3ia.bilang.BiLang.StatisticalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMEANEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMEANMEANKeyword_0_0 = (Keyword)cMEANEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMEDIANEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMEDIANMEDIANKeyword_1_0 = (Keyword)cMEDIANEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSTDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSTDSTDKeyword_2_0 = (Keyword)cSTDEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum StatisticalOperator returns StatisticalOperator:
		//                MEAN = 'MEAN' | MEDIAN = 'MEDIAN' | STD = 'STD';
		public EnumRule getRule() { return rule; }
		
		//MEAN = 'MEAN' | MEDIAN = 'MEDIAN' | STD = 'STD'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MEAN = 'MEAN'
		public EnumLiteralDeclaration getMEANEnumLiteralDeclaration_0() { return cMEANEnumLiteralDeclaration_0; }
		
		//'MEAN'
		public Keyword getMEANMEANKeyword_0_0() { return cMEANMEANKeyword_0_0; }
		
		//MEDIAN = 'MEDIAN'
		public EnumLiteralDeclaration getMEDIANEnumLiteralDeclaration_1() { return cMEDIANEnumLiteralDeclaration_1; }
		
		//'MEDIAN'
		public Keyword getMEDIANMEDIANKeyword_1_0() { return cMEDIANMEDIANKeyword_1_0; }
		
		//STD = 'STD'
		public EnumLiteralDeclaration getSTDEnumLiteralDeclaration_2() { return cSTDEnumLiteralDeclaration_2; }
		
		//'STD'
		public Keyword getSTDSTDKeyword_2_0() { return cSTDSTDKeyword_2_0; }
	}
	
	private final TaskElements pTask;
	private final FileExtractorElements pFileExtractor;
	private final FilteringStepElements pFilteringStep;
	private final PreprocessingStepElements pPreprocessingStep;
	private final PlotElements pPlot;
	private final EStringElements pEString;
	private final DataFilteringElements pDataFiltering;
	private final DashBoardElements pDashBoard;
	private final CsvExtractorElements pCsvExtractor;
	private final ExcelExtractorElements pExcelExtractor;
	private final QuantitativeFilteringElements pQuantitativeFiltering;
	private final QualitativeFilteringElements pQualitativeFiltering;
	private final MathOperationElements pMathOperation;
	private final ColReferenceElements pColReference;
	private final StatisticalOperationElements pStatisticalOperation;
	private final EFloatElements pEFloat;
	private final BarPlotElements pBarPlot;
	private final LinePlotElements pLinePlot;
	private final MathOperatorElements eMathOperator;
	private final StatisticalOperatorElements eStatisticalOperator;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BiLangGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTask = new TaskElements();
		this.pFileExtractor = new FileExtractorElements();
		this.pFilteringStep = new FilteringStepElements();
		this.pPreprocessingStep = new PreprocessingStepElements();
		this.pPlot = new PlotElements();
		this.pEString = new EStringElements();
		this.pDataFiltering = new DataFilteringElements();
		this.pDashBoard = new DashBoardElements();
		this.pCsvExtractor = new CsvExtractorElements();
		this.pExcelExtractor = new ExcelExtractorElements();
		this.pQuantitativeFiltering = new QuantitativeFilteringElements();
		this.pQualitativeFiltering = new QualitativeFilteringElements();
		this.pMathOperation = new MathOperationElements();
		this.pColReference = new ColReferenceElements();
		this.pStatisticalOperation = new StatisticalOperationElements();
		this.pEFloat = new EFloatElements();
		this.pBarPlot = new BarPlotElements();
		this.pLinePlot = new LinePlotElements();
		this.eMathOperator = new MathOperatorElements();
		this.eStatisticalOperator = new StatisticalOperatorElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ucal3ia.bilang.BiLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Task returns Task:
	//    'Task'name=ID":"
	//        "load" fileextractor+=FileExtractor (datafiltering+=DataFiltering)?
	//        (fileextractor+= FileExtractor (datafiltering+= DataFiltering)?)*
	//        '[dashboard:' dashboard+=DashBoard (dashboard+=DashBoard)* ']';
	public TaskElements getTaskAccess() {
		return pTask;
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}
	
	//FileExtractor returns FileExtractor:
	//    CsvExtractor | ExcelExtractor;
	public FileExtractorElements getFileExtractorAccess() {
		return pFileExtractor;
	}
	
	public ParserRule getFileExtractorRule() {
		return getFileExtractorAccess().getRule();
	}
	
	//FilteringStep returns FilteringStep:
	//    QuantitativeFiltering | QualitativeFiltering;
	public FilteringStepElements getFilteringStepAccess() {
		return pFilteringStep;
	}
	
	public ParserRule getFilteringStepRule() {
		return getFilteringStepAccess().getRule();
	}
	
	//PreprocessingStep returns PreprocessingStep:
	//    MathOperation | ColReference | StatisticalOperation;
	public PreprocessingStepElements getPreprocessingStepAccess() {
		return pPreprocessingStep;
	}
	
	public ParserRule getPreprocessingStepRule() {
		return getPreprocessingStepAccess().getRule();
	}
	
	//Plot returns Plot:
	//    BarPlot | LinePlot;
	public PlotElements getPlotAccess() {
		return pPlot;
	}
	
	public ParserRule getPlotRule() {
		return getPlotAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//DataFiltering returns DataFiltering:
	//    "filter"
	//    name=EString "=>" fileextractor=[FileExtractor|EString]
	//        ('processing step=' processingstep+=PreprocessingStep ( processingstep+=PreprocessingStep)* )?
	//        'filtering step=' filteringstep+=FilteringStep ( "," filteringstep+=FilteringStep)* ;
	public DataFilteringElements getDataFilteringAccess() {
		return pDataFiltering;
	}
	
	public ParserRule getDataFilteringRule() {
		return getDataFilteringAccess().getRule();
	}
	
	//DashBoard returns DashBoard:
	//    name=EString "=>" ("e" fileextractor=[FileExtractor|EString] | 'df' datafiltering=[DataFiltering|EString])
	//        'plots' '{'
	//            plot+=Plot
	//            (plot+=Plot)*
	//            '}' ;
	public DashBoardElements getDashBoardAccess() {
		return pDashBoard;
	}
	
	public ParserRule getDashBoardRule() {
		return getDashBoardAccess().getRule();
	}
	
	//CsvExtractor returns CsvExtractor:
	//    {CsvExtractor}
	//    name=EString".csv" "=>" path=EString;
	public CsvExtractorElements getCsvExtractorAccess() {
		return pCsvExtractor;
	}
	
	public ParserRule getCsvExtractorRule() {
		return getCsvExtractorAccess().getRule();
	}
	
	//ExcelExtractor returns ExcelExtractor:
	//    {ExcelExtractor}
	//    name=EString".xlsx" "=>" path=EString;
	public ExcelExtractorElements getExcelExtractorAccess() {
		return pExcelExtractor;
	}
	
	public ParserRule getExcelExtractorRule() {
		return getExcelExtractorAccess().getRule();
	}
	
	//QuantitativeFiltering returns QuantitativeFiltering:
	//    {QuantitativeFiltering}
	//    "quanti axis->" axis= EString "value" values= EString
	//    ;
	public QuantitativeFilteringElements getQuantitativeFilteringAccess() {
		return pQuantitativeFiltering;
	}
	
	public ParserRule getQuantitativeFilteringRule() {
		return getQuantitativeFilteringAccess().getRule();
	}
	
	//QualitativeFiltering returns QualitativeFiltering:
	//    {QualitativeFiltering}
	//    "quali axis->" axis= EString "label" labels= EString
	//    ;
	public QualitativeFilteringElements getQualitativeFilteringAccess() {
		return pQualitativeFiltering;
	}
	
	public ParserRule getQualitativeFilteringRule() {
		return getQualitativeFilteringAccess().getRule();
	}
	
	//MathOperation returns MathOperation:
	//    'l' lside=PreprocessingStep operator=MathOperator 'r' rside=PreprocessingStep;
	public MathOperationElements getMathOperationAccess() {
		return pMathOperation;
	}
	
	public ParserRule getMathOperationRule() {
		return getMathOperationAccess().getRule();
	}
	
	//ColReference returns ColReference:
	//    {ColReference}
	//    target= EString
	//    ;
	public ColReferenceElements getColReferenceAccess() {
		return pColReference;
	}
	
	public ParserRule getColReferenceRule() {
		return getColReferenceAccess().getRule();
	}
	
	//StatisticalOperation returns StatisticalOperation:
	//    operator=StatisticalOperator"("colreference=ColReference")";
	public StatisticalOperationElements getStatisticalOperationAccess() {
		return pStatisticalOperation;
	}
	
	public ParserRule getStatisticalOperationRule() {
		return getStatisticalOperationAccess().getRule();
	}
	
	//EFloat returns ecore::EFloat:
	//    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	public EFloatElements getEFloatAccess() {
		return pEFloat;
	}
	
	public ParserRule getEFloatRule() {
		return getEFloatAccess().getRule();
	}
	
	//BarPlot returns BarPlot:
	//    {BarPlot}
	//    'bar' name=ID "->" 'xAx' xAxis=EString 'yA' yAxis=EString ('loc' location=EString)? ('colors' color=EString)? ('thickness' thickness=EFloat)?;
	public BarPlotElements getBarPlotAccess() {
		return pBarPlot;
	}
	
	public ParserRule getBarPlotRule() {
		return getBarPlotAccess().getRule();
	}
	
	//LinePlot returns LinePlot:
	//    {LinePlot}
	//    'line' name=ID "->" 'xAx' xAxis=EString 'yA' yAxis=EString ('loc' location=EString)? ('colors' color=EString)? ('thickness' thickness=EFloat)?;
	public LinePlotElements getLinePlotAccess() {
		return pLinePlot;
	}
	
	public ParserRule getLinePlotRule() {
		return getLinePlotAccess().getRule();
	}
	
	//enum MathOperator returns MathOperator:
	//                PLUS = 'PLUS' | MINUS = 'MINUS' | MULTIPLY = 'MULTIPLY' | DIVIDING = 'DIVIDING';
	public MathOperatorElements getMathOperatorAccess() {
		return eMathOperator;
	}
	
	public EnumRule getMathOperatorRule() {
		return getMathOperatorAccess().getRule();
	}
	
	//enum StatisticalOperator returns StatisticalOperator:
	//                MEAN = 'MEAN' | MEDIAN = 'MEDIAN' | STD = 'STD';
	public StatisticalOperatorElements getStatisticalOperatorAccess() {
		return eStatisticalOperator;
	}
	
	public EnumRule getStatisticalOperatorRule() {
		return getStatisticalOperatorAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
