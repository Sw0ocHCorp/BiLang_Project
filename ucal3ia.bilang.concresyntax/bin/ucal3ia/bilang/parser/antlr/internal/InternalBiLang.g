/*
 * generated by Xtext 2.25.0
 */
grammar InternalBiLang;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package ucal3ia.bilang.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package ucal3ia.bilang.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import ucal3ia.bilang.services.BiLangGrammarAccess;

}

@parser::members {

 	private BiLangGrammarAccess grammarAccess;

    public InternalBiLangParser(TokenStream input, BiLangGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Task";
   	}

   	@Override
   	protected BiLangGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleTask
entryRuleTask returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTaskRule()); }
	iv_ruleTask=ruleTask
	{ $current=$iv_ruleTask.current; }
	EOF;

// Rule Task
ruleTask returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Task'
		{
			newLeafNode(otherlv_0, grammarAccess.getTaskAccess().getTaskKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTaskAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTaskRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getTaskAccess().getColonKeyword_2());
		}
		otherlv_3='load'
		{
			newLeafNode(otherlv_3, grammarAccess.getTaskAccess().getLoadKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTaskAccess().getFileextractorFileExtractorParserRuleCall_4_0());
				}
				lv_fileextractor_4_0=ruleFileExtractor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTaskRule());
					}
					add(
						$current,
						"fileextractor",
						lv_fileextractor_4_0,
						"ucal3ia.bilang.BiLang.FileExtractor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTaskAccess().getDatafilteringDataFilteringParserRuleCall_5_0());
				}
				lv_datafiltering_5_0=ruleDataFiltering
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTaskRule());
					}
					add(
						$current,
						"datafiltering",
						lv_datafiltering_5_0,
						"ucal3ia.bilang.BiLang.DataFiltering");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTaskAccess().getFileextractorFileExtractorParserRuleCall_6_0_0());
					}
					lv_fileextractor_6_0=ruleFileExtractor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTaskRule());
						}
						add(
							$current,
							"fileextractor",
							lv_fileextractor_6_0,
							"ucal3ia.bilang.BiLang.FileExtractor");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTaskAccess().getDatafilteringDataFilteringParserRuleCall_6_1_0());
					}
					lv_datafiltering_7_0=ruleDataFiltering
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTaskRule());
						}
						add(
							$current,
							"datafiltering",
							lv_datafiltering_7_0,
							"ucal3ia.bilang.BiLang.DataFiltering");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)*
		otherlv_8='[dashboard:'
		{
			newLeafNode(otherlv_8, grammarAccess.getTaskAccess().getDashboardKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTaskAccess().getDashboardDashBoardParserRuleCall_8_0());
				}
				lv_dashboard_9_0=ruleDashBoard
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTaskRule());
					}
					set(
						$current,
						"dashboard",
						lv_dashboard_9_0,
						"ucal3ia.bilang.BiLang.DashBoard");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_10=']'
		{
			newLeafNode(otherlv_10, grammarAccess.getTaskAccess().getRightSquareBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleFileExtractor
entryRuleFileExtractor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFileExtractorRule()); }
	iv_ruleFileExtractor=ruleFileExtractor
	{ $current=$iv_ruleFileExtractor.current; }
	EOF;

// Rule FileExtractor
ruleFileExtractor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFileExtractorAccess().getCsvExtractorParserRuleCall_0());
		}
		this_CsvExtractor_0=ruleCsvExtractor
		{
			$current = $this_CsvExtractor_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFileExtractorAccess().getExcelExtractorParserRuleCall_1());
		}
		this_ExcelExtractor_1=ruleExcelExtractor
		{
			$current = $this_ExcelExtractor_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFilteringStep
entryRuleFilteringStep returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFilteringStepRule()); }
	iv_ruleFilteringStep=ruleFilteringStep
	{ $current=$iv_ruleFilteringStep.current; }
	EOF;

// Rule FilteringStep
ruleFilteringStep returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFilteringStepAccess().getQuantitativeFilteringParserRuleCall_0());
		}
		this_QuantitativeFiltering_0=ruleQuantitativeFiltering
		{
			$current = $this_QuantitativeFiltering_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFilteringStepAccess().getQualitativeFilteringParserRuleCall_1());
		}
		this_QualitativeFiltering_1=ruleQualitativeFiltering
		{
			$current = $this_QualitativeFiltering_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePreprocessingStep
entryRulePreprocessingStep returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPreprocessingStepRule()); }
	iv_rulePreprocessingStep=rulePreprocessingStep
	{ $current=$iv_rulePreprocessingStep.current; }
	EOF;

// Rule PreprocessingStep
rulePreprocessingStep returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPreprocessingStepAccess().getMathOperationParserRuleCall_0());
		}
		this_MathOperation_0=ruleMathOperation
		{
			$current = $this_MathOperation_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPreprocessingStepAccess().getColReferenceParserRuleCall_1());
		}
		this_ColReference_1=ruleColReference
		{
			$current = $this_ColReference_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPreprocessingStepAccess().getStatisticalOperationParserRuleCall_2());
		}
		this_StatisticalOperation_2=ruleStatisticalOperation
		{
			$current = $this_StatisticalOperation_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePlot
entryRulePlot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlotRule()); }
	iv_rulePlot=rulePlot
	{ $current=$iv_rulePlot.current; }
	EOF;

// Rule Plot
rulePlot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPlotAccess().getBarPlotParserRuleCall_0());
		}
		this_BarPlot_0=ruleBarPlot
		{
			$current = $this_BarPlot_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPlotAccess().getLinePlotParserRuleCall_1());
		}
		this_LinePlot_1=ruleLinePlot
		{
			$current = $this_LinePlot_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleDataFiltering
entryRuleDataFiltering returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataFilteringRule()); }
	iv_ruleDataFiltering=ruleDataFiltering
	{ $current=$iv_ruleDataFiltering.current; }
	EOF;

// Rule DataFiltering
ruleDataFiltering returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='=>'
		{
			newLeafNode(otherlv_0, grammarAccess.getDataFilteringAccess().getEqualsSignGreaterThanSignKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDataFilteringRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getDataFilteringAccess().getFileextractorFileExtractorCrossReference_1_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='processing step='
			{
				newLeafNode(otherlv_2, grammarAccess.getDataFilteringAccess().getProcessingStepKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDataFilteringAccess().getProcessingstepPreprocessingStepParserRuleCall_2_1_0());
					}
					lv_processingstep_3_0=rulePreprocessingStep
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDataFilteringRule());
						}
						add(
							$current,
							"processingstep",
							lv_processingstep_3_0,
							"ucal3ia.bilang.BiLang.PreprocessingStep");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDataFilteringAccess().getProcessingstepPreprocessingStepParserRuleCall_2_2_0());
					}
					lv_processingstep_4_0=rulePreprocessingStep
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDataFilteringRule());
						}
						add(
							$current,
							"processingstep",
							lv_processingstep_4_0,
							"ucal3ia.bilang.BiLang.PreprocessingStep");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		otherlv_5='filtering step='
		{
			newLeafNode(otherlv_5, grammarAccess.getDataFilteringAccess().getFilteringStepKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDataFilteringAccess().getFilteringstepFilteringStepParserRuleCall_4_0());
				}
				lv_filteringstep_6_0=ruleFilteringStep
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDataFilteringRule());
					}
					add(
						$current,
						"filteringstep",
						lv_filteringstep_6_0,
						"ucal3ia.bilang.BiLang.FilteringStep");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_7=','
			{
				newLeafNode(otherlv_7, grammarAccess.getDataFilteringAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDataFilteringAccess().getFilteringstepFilteringStepParserRuleCall_5_1_0());
					}
					lv_filteringstep_8_0=ruleFilteringStep
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDataFilteringRule());
						}
						add(
							$current,
							"filteringstep",
							lv_filteringstep_8_0,
							"ucal3ia.bilang.BiLang.FilteringStep");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleDashBoard
entryRuleDashBoard returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDashBoardRule()); }
	iv_ruleDashBoard=ruleDashBoard
	{ $current=$iv_ruleDashBoard.current; }
	EOF;

// Rule DashBoard
ruleDashBoard returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDashBoardAccess().getNameEStringParserRuleCall_0_0());
				}
				lv_name_0_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDashBoardRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"ucal3ia.bilang.BiLang.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='=>'
		{
			newLeafNode(otherlv_1, grammarAccess.getDashBoardAccess().getEqualsSignGreaterThanSignKeyword_1());
		}
		(
			(
				otherlv_2='e'
				{
					newLeafNode(otherlv_2, grammarAccess.getDashBoardAccess().getEKeyword_2_0_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getDashBoardRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getDashBoardAccess().getFileextractorFileExtractorCrossReference_2_0_1_0());
						}
						ruleEString
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				otherlv_4='df'
				{
					newLeafNode(otherlv_4, grammarAccess.getDashBoardAccess().getDfKeyword_2_1_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getDashBoardRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getDashBoardAccess().getDatafilteringDataFilteringCrossReference_2_1_1_0());
						}
						ruleEString
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
		otherlv_6='plots'
		{
			newLeafNode(otherlv_6, grammarAccess.getDashBoardAccess().getPlotsKeyword_3());
		}
		otherlv_7='{'
		{
			newLeafNode(otherlv_7, grammarAccess.getDashBoardAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDashBoardAccess().getPlotPlotParserRuleCall_5_0());
				}
				lv_plot_8_0=rulePlot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDashBoardRule());
					}
					add(
						$current,
						"plot",
						lv_plot_8_0,
						"ucal3ia.bilang.BiLang.Plot");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDashBoardAccess().getPlotPlotParserRuleCall_6_0());
				}
				lv_plot_9_0=rulePlot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDashBoardRule());
					}
					add(
						$current,
						"plot",
						lv_plot_9_0,
						"ucal3ia.bilang.BiLang.Plot");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getDashBoardAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleCsvExtractor
entryRuleCsvExtractor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCsvExtractorRule()); }
	iv_ruleCsvExtractor=ruleCsvExtractor
	{ $current=$iv_ruleCsvExtractor.current; }
	EOF;

// Rule CsvExtractor
ruleCsvExtractor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCsvExtractorAccess().getCsvExtractorAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCsvExtractorAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCsvExtractorRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"ucal3ia.bilang.BiLang.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='.csv'
		{
			newLeafNode(otherlv_2, grammarAccess.getCsvExtractorAccess().getCsvKeyword_2());
		}
		otherlv_3='=>'
		{
			newLeafNode(otherlv_3, grammarAccess.getCsvExtractorAccess().getEqualsSignGreaterThanSignKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCsvExtractorAccess().getPathEStringParserRuleCall_4_0());
				}
				lv_path_4_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCsvExtractorRule());
					}
					set(
						$current,
						"path",
						lv_path_4_0,
						"ucal3ia.bilang.BiLang.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExcelExtractor
entryRuleExcelExtractor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExcelExtractorRule()); }
	iv_ruleExcelExtractor=ruleExcelExtractor
	{ $current=$iv_ruleExcelExtractor.current; }
	EOF;

// Rule ExcelExtractor
ruleExcelExtractor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getExcelExtractorAccess().getExcelExtractorAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExcelExtractorAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExcelExtractorRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"ucal3ia.bilang.BiLang.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='.xlsx'
		{
			newLeafNode(otherlv_2, grammarAccess.getExcelExtractorAccess().getXlsxKeyword_2());
		}
		otherlv_3='=>'
		{
			newLeafNode(otherlv_3, grammarAccess.getExcelExtractorAccess().getEqualsSignGreaterThanSignKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExcelExtractorAccess().getPathEStringParserRuleCall_4_0());
				}
				lv_path_4_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExcelExtractorRule());
					}
					set(
						$current,
						"path",
						lv_path_4_0,
						"ucal3ia.bilang.BiLang.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleQuantitativeFiltering
entryRuleQuantitativeFiltering returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQuantitativeFilteringRule()); }
	iv_ruleQuantitativeFiltering=ruleQuantitativeFiltering
	{ $current=$iv_ruleQuantitativeFiltering.current; }
	EOF;

// Rule QuantitativeFiltering
ruleQuantitativeFiltering returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getQuantitativeFilteringAccess().getQuantitativeFilteringAction_0(),
					$current);
			}
		)
		otherlv_1='quanti axis->'
		{
			newLeafNode(otherlv_1, grammarAccess.getQuantitativeFilteringAccess().getQuantiAxisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getQuantitativeFilteringAccess().getAxisEStringParserRuleCall_2_0());
				}
				lv_axis_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuantitativeFilteringRule());
					}
					set(
						$current,
						"axis",
						lv_axis_2_0,
						"ucal3ia.bilang.BiLang.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='value'
		{
			newLeafNode(otherlv_3, grammarAccess.getQuantitativeFilteringAccess().getValueKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getQuantitativeFilteringAccess().getValuesEStringParserRuleCall_4_0());
				}
				lv_values_4_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuantitativeFilteringRule());
					}
					set(
						$current,
						"values",
						lv_values_4_0,
						"ucal3ia.bilang.BiLang.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleQualitativeFiltering
entryRuleQualitativeFiltering returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQualitativeFilteringRule()); }
	iv_ruleQualitativeFiltering=ruleQualitativeFiltering
	{ $current=$iv_ruleQualitativeFiltering.current; }
	EOF;

// Rule QualitativeFiltering
ruleQualitativeFiltering returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getQualitativeFilteringAccess().getQualitativeFilteringAction_0(),
					$current);
			}
		)
		otherlv_1='quali axis->'
		{
			newLeafNode(otherlv_1, grammarAccess.getQualitativeFilteringAccess().getQualiAxisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getQualitativeFilteringAccess().getAxisEStringParserRuleCall_2_0());
				}
				lv_axis_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQualitativeFilteringRule());
					}
					set(
						$current,
						"axis",
						lv_axis_2_0,
						"ucal3ia.bilang.BiLang.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='label'
		{
			newLeafNode(otherlv_3, grammarAccess.getQualitativeFilteringAccess().getLabelKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getQualitativeFilteringAccess().getLabelsEStringParserRuleCall_4_0());
				}
				lv_labels_4_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQualitativeFilteringRule());
					}
					set(
						$current,
						"labels",
						lv_labels_4_0,
						"ucal3ia.bilang.BiLang.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMathOperation
entryRuleMathOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMathOperationRule()); }
	iv_ruleMathOperation=ruleMathOperation
	{ $current=$iv_ruleMathOperation.current; }
	EOF;

// Rule MathOperation
ruleMathOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='l'
		{
			newLeafNode(otherlv_0, grammarAccess.getMathOperationAccess().getLKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMathOperationAccess().getLsidePreprocessingStepParserRuleCall_1_0());
				}
				lv_lside_1_0=rulePreprocessingStep
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMathOperationRule());
					}
					set(
						$current,
						"lside",
						lv_lside_1_0,
						"ucal3ia.bilang.BiLang.PreprocessingStep");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMathOperationAccess().getOperatorMathOperatorEnumRuleCall_2_0());
				}
				lv_operator_2_0=ruleMathOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMathOperationRule());
					}
					set(
						$current,
						"operator",
						lv_operator_2_0,
						"ucal3ia.bilang.BiLang.MathOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='r'
		{
			newLeafNode(otherlv_3, grammarAccess.getMathOperationAccess().getRKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMathOperationAccess().getRsidePreprocessingStepParserRuleCall_4_0());
				}
				lv_rside_4_0=rulePreprocessingStep
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMathOperationRule());
					}
					set(
						$current,
						"rside",
						lv_rside_4_0,
						"ucal3ia.bilang.BiLang.PreprocessingStep");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleColReference
entryRuleColReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColReferenceRule()); }
	iv_ruleColReference=ruleColReference
	{ $current=$iv_ruleColReference.current; }
	EOF;

// Rule ColReference
ruleColReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getColReferenceAccess().getColReferenceAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getColReferenceAccess().getTargetEStringParserRuleCall_1_0());
				}
				lv_target_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getColReferenceRule());
					}
					set(
						$current,
						"target",
						lv_target_1_0,
						"ucal3ia.bilang.BiLang.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleStatisticalOperation
entryRuleStatisticalOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatisticalOperationRule()); }
	iv_ruleStatisticalOperation=ruleStatisticalOperation
	{ $current=$iv_ruleStatisticalOperation.current; }
	EOF;

// Rule StatisticalOperation
ruleStatisticalOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStatisticalOperationAccess().getOperatorStatisticalOperatorEnumRuleCall_0_0());
				}
				lv_operator_0_0=ruleStatisticalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatisticalOperationRule());
					}
					set(
						$current,
						"operator",
						lv_operator_0_0,
						"ucal3ia.bilang.BiLang.StatisticalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getStatisticalOperationAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStatisticalOperationAccess().getColreferenceColReferenceParserRuleCall_2_0());
				}
				lv_colreference_2_0=ruleColReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatisticalOperationRule());
					}
					set(
						$current,
						"colreference",
						lv_colreference_2_0,
						"ucal3ia.bilang.BiLang.ColReference");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getStatisticalOperationAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleEFloat
entryRuleEFloat returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEFloatRule()); }
	iv_ruleEFloat=ruleEFloat
	{ $current=$iv_ruleEFloat.current.getText(); }
	EOF;

// Rule EFloat
ruleEFloat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEFloatAccess().getHyphenMinusKeyword_0());
			}
		)?
		(
			this_INT_1=RULE_INT
			{
				$current.merge(this_INT_1);
			}
			{
				newLeafNode(this_INT_1, grammarAccess.getEFloatAccess().getINTTerminalRuleCall_1());
			}
		)?
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEFloatAccess().getFullStopKeyword_2());
		}
		this_INT_3=RULE_INT
		{
			$current.merge(this_INT_3);
		}
		{
			newLeafNode(this_INT_3, grammarAccess.getEFloatAccess().getINTTerminalRuleCall_3());
		}
		(
			(
				kw='E'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEFloatAccess().getEKeyword_4_0_0());
				}
				    |
				kw='e'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEFloatAccess().getEKeyword_4_0_1());
				}
			)
			(
				kw='-'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEFloatAccess().getHyphenMinusKeyword_4_1());
				}
			)?
			this_INT_7=RULE_INT
			{
				$current.merge(this_INT_7);
			}
			{
				newLeafNode(this_INT_7, grammarAccess.getEFloatAccess().getINTTerminalRuleCall_4_2());
			}
		)?
	)
;

// Entry rule entryRuleBarPlot
entryRuleBarPlot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBarPlotRule()); }
	iv_ruleBarPlot=ruleBarPlot
	{ $current=$iv_ruleBarPlot.current; }
	EOF;

// Rule BarPlot
ruleBarPlot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBarPlotAccess().getBarPlotAction_0(),
					$current);
			}
		)
		otherlv_1='bar'
		{
			newLeafNode(otherlv_1, grammarAccess.getBarPlotAccess().getBarKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getBarPlotAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBarPlotRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='->'
		{
			newLeafNode(otherlv_3, grammarAccess.getBarPlotAccess().getHyphenMinusGreaterThanSignKeyword_3());
		}
		otherlv_4='xAx'
		{
			newLeafNode(otherlv_4, grammarAccess.getBarPlotAccess().getXAxKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBarPlotAccess().getXAxisEStringParserRuleCall_5_0());
				}
				lv_xAxis_5_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBarPlotRule());
					}
					set(
						$current,
						"xAxis",
						lv_xAxis_5_0,
						"ucal3ia.bilang.BiLang.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='yA'
		{
			newLeafNode(otherlv_6, grammarAccess.getBarPlotAccess().getYAKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBarPlotAccess().getYAxisEStringParserRuleCall_7_0());
				}
				lv_yAxis_7_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBarPlotRule());
					}
					set(
						$current,
						"yAxis",
						lv_yAxis_7_0,
						"ucal3ia.bilang.BiLang.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_8='loc'
			{
				newLeafNode(otherlv_8, grammarAccess.getBarPlotAccess().getLocKeyword_8_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBarPlotAccess().getLocationEStringParserRuleCall_8_1_0());
					}
					lv_location_9_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBarPlotRule());
						}
						set(
							$current,
							"location",
							lv_location_9_0,
							"ucal3ia.bilang.BiLang.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_10='colors'
			{
				newLeafNode(otherlv_10, grammarAccess.getBarPlotAccess().getColorsKeyword_9_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBarPlotAccess().getColorsEStringParserRuleCall_9_1_0());
					}
					lv_colors_11_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBarPlotRule());
						}
						set(
							$current,
							"colors",
							lv_colors_11_0,
							"ucal3ia.bilang.BiLang.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_12='thickness'
			{
				newLeafNode(otherlv_12, grammarAccess.getBarPlotAccess().getThicknessKeyword_10_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBarPlotAccess().getThicknessEFloatParserRuleCall_10_1_0());
					}
					lv_thickness_13_0=ruleEFloat
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBarPlotRule());
						}
						set(
							$current,
							"thickness",
							lv_thickness_13_0,
							"ucal3ia.bilang.BiLang.EFloat");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleLinePlot
entryRuleLinePlot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLinePlotRule()); }
	iv_ruleLinePlot=ruleLinePlot
	{ $current=$iv_ruleLinePlot.current; }
	EOF;

// Rule LinePlot
ruleLinePlot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLinePlotAccess().getLinePlotAction_0(),
					$current);
			}
		)
		otherlv_1='line'
		{
			newLeafNode(otherlv_1, grammarAccess.getLinePlotAccess().getLineKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getLinePlotAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLinePlotRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='->'
		{
			newLeafNode(otherlv_3, grammarAccess.getLinePlotAccess().getHyphenMinusGreaterThanSignKeyword_3());
		}
		otherlv_4='xAx'
		{
			newLeafNode(otherlv_4, grammarAccess.getLinePlotAccess().getXAxKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLinePlotAccess().getXAxisEStringParserRuleCall_5_0());
				}
				lv_xAxis_5_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLinePlotRule());
					}
					set(
						$current,
						"xAxis",
						lv_xAxis_5_0,
						"ucal3ia.bilang.BiLang.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='yA'
		{
			newLeafNode(otherlv_6, grammarAccess.getLinePlotAccess().getYAKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLinePlotAccess().getYAxisEStringParserRuleCall_7_0());
				}
				lv_yAxis_7_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLinePlotRule());
					}
					set(
						$current,
						"yAxis",
						lv_yAxis_7_0,
						"ucal3ia.bilang.BiLang.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_8='loc'
			{
				newLeafNode(otherlv_8, grammarAccess.getLinePlotAccess().getLocKeyword_8_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLinePlotAccess().getLocationEStringParserRuleCall_8_1_0());
					}
					lv_location_9_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLinePlotRule());
						}
						set(
							$current,
							"location",
							lv_location_9_0,
							"ucal3ia.bilang.BiLang.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_10='colors'
			{
				newLeafNode(otherlv_10, grammarAccess.getLinePlotAccess().getColorsKeyword_9_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLinePlotAccess().getColorsEStringParserRuleCall_9_1_0());
					}
					lv_colors_11_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLinePlotRule());
						}
						set(
							$current,
							"colors",
							lv_colors_11_0,
							"ucal3ia.bilang.BiLang.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_12='thickness'
			{
				newLeafNode(otherlv_12, grammarAccess.getLinePlotAccess().getThicknessKeyword_10_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLinePlotAccess().getThicknessEFloatParserRuleCall_10_1_0());
					}
					lv_thickness_13_0=ruleEFloat
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLinePlotRule());
						}
						set(
							$current,
							"thickness",
							lv_thickness_13_0,
							"ucal3ia.bilang.BiLang.EFloat");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Rule MathOperator
ruleMathOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='PLUS'
			{
				$current = grammarAccess.getMathOperatorAccess().getPLUSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMathOperatorAccess().getPLUSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='MINUS'
			{
				$current = grammarAccess.getMathOperatorAccess().getMINUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMathOperatorAccess().getMINUSEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='MULTIPLY'
			{
				$current = grammarAccess.getMathOperatorAccess().getMULTIPLYEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getMathOperatorAccess().getMULTIPLYEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='DIVIDING'
			{
				$current = grammarAccess.getMathOperatorAccess().getDIVIDINGEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getMathOperatorAccess().getDIVIDINGEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule StatisticalOperator
ruleStatisticalOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='MEAN'
			{
				$current = grammarAccess.getStatisticalOperatorAccess().getMEANEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getStatisticalOperatorAccess().getMEANEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='MEDIAN'
			{
				$current = grammarAccess.getStatisticalOperatorAccess().getMEDIANEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getStatisticalOperatorAccess().getMEDIANEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='STD'
			{
				$current = grammarAccess.getStatisticalOperatorAccess().getSTDEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getStatisticalOperatorAccess().getSTDEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
