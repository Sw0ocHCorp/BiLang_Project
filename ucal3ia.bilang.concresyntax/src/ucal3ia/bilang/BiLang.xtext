// automatically generated by Xtext
grammar ucal3ia.bilang.BiLang with org.eclipse.xtext.common.Terminals

import "http://www.example.org/abstractsyntax" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Task returns Task:
	'Task'name=ID":"
		"load" fileextractor+=FileExtractor (datafiltering+=DataFiltering)?
		(fileextractor+= FileExtractor (datafiltering+= DataFiltering)?)* 
		'[dashboard:' dashboard+=DashBoard (dashboard+=DashBoard)* ']';

FileExtractor returns FileExtractor:
	CsvExtractor | ExcelExtractor;


FilteringStep returns FilteringStep:
	QuantitativeFiltering | QualitativeFiltering;

PreprocessingStep returns PreprocessingStep:
	MathOperation | ColReference | StatisticalOperation;

Plot returns Plot:
	BarPlot | LinePlot;


EString returns ecore::EString:
	STRING | ID;

DataFiltering returns DataFiltering:
	"filter"
	name=EString "=>" fileextractor=[FileExtractor|EString]
		('processing step=' processingstep+=PreprocessingStep ( processingstep+=PreprocessingStep)* )?
		'filtering step=' filteringstep+=FilteringStep ( "," filteringstep+=FilteringStep)* ;

DashBoard returns DashBoard:
	
	name=EString "=>" ("e" fileextractor=[FileExtractor|EString] | 'df' datafiltering=[DataFiltering|EString])
		'plots' '{' 
			plot+=Plot 
			(plot+=Plot)* 
			'}' ;

CsvExtractor returns CsvExtractor:
	{CsvExtractor}
	name=EString".csv" "=>" path=EString;

ExcelExtractor returns ExcelExtractor:
	{ExcelExtractor}
	name=EString".xlsx" "=>" path=EString;

QuantitativeFiltering returns QuantitativeFiltering:
	{QuantitativeFiltering}
	"quanti axis->" axis= EString "value" values= EString
	;

QualitativeFiltering returns QualitativeFiltering:
	{QualitativeFiltering}
	"quali axis->" axis= EString "label" labels= EString
	;

MathOperation returns MathOperation:
	'l' lside=PreprocessingStep operator=MathOperator 'r' rside=PreprocessingStep;


ColReference returns ColReference:
	{ColReference}
	target= EString
	;

StatisticalOperation returns StatisticalOperation:
	operator=StatisticalOperator"("colreference=ColReference")";

EFloat returns ecore::EFloat:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

BarPlot returns BarPlot:
	{BarPlot}
	'bar' name=ID "->" 'xAx' xAxis=EString 'yA' yAxis=EString ('loc' location=EString)? ('colors' color=EString)? ('thickness' thickness=EFloat)?;

LinePlot returns LinePlot:
	{LinePlot}
	'line' name=ID "->" 'xAx' xAxis=EString 'yA' yAxis=EString ('loc' location=EString)? ('colors' color=EString)? ('thickness' thickness=EFloat)?;

enum MathOperator returns MathOperator:
				PLUS = 'PLUS' | MINUS = 'MINUS' | MULTIPLY = 'MULTIPLY' | DIVIDING = 'DIVIDING';

enum StatisticalOperator returns StatisticalOperator:
				MEAN = 'MEAN' | MEDIAN = 'MEDIAN' | STD = 'STD';
