/**
 * generated by Xtext 2.25.0
 */
package ucal3ia.bilang.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import ucal3ia.bilang.abstractsyntax.DashBoard;
import ucal3ia.bilang.abstractsyntax.DataFiltering;
import ucal3ia.bilang.abstractsyntax.FileExtractor;
import ucal3ia.bilang.abstractsyntax.FilteringStep;
import ucal3ia.bilang.abstractsyntax.PreprocessingStep;
import ucal3ia.bilang.abstractsyntax.Task;
import ucal3ia.bilang.services.BiLangGrammarAccess;

@SuppressWarnings("all")
public class BiLangFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private BiLangGrammarAccess _biLangGrammarAccess;
  
  protected void _format(final Task task, @Extension final IFormattableDocument document) {
    EList<FileExtractor> _fileextractor = task.getFileextractor();
    for (final FileExtractor fileExtractor : _fileextractor) {
      document.<FileExtractor>format(fileExtractor);
    }
    EList<DataFiltering> _datafiltering = task.getDatafiltering();
    for (final DataFiltering dataFiltering : _datafiltering) {
      document.<DataFiltering>format(dataFiltering);
    }
    document.<DashBoard>format(task.getDashboard());
  }
  
  protected void _format(final DataFiltering dataFiltering, @Extension final IFormattableDocument document) {
    EList<FilteringStep> _filteringstep = dataFiltering.getFilteringstep();
    for (final FilteringStep filteringStep : _filteringstep) {
      document.<FilteringStep>format(filteringStep);
    }
    EList<PreprocessingStep> _processingstep = dataFiltering.getProcessingstep();
    for (final PreprocessingStep processingStep : _processingstep) {
      document.<PreprocessingStep>format(processingStep);
    }
  }
  
  public void format(final Object task, final IFormattableDocument document) {
    if (task instanceof XtextResource) {
      _format((XtextResource)task, document);
      return;
    } else if (task instanceof Task) {
      _format((Task)task, document);
      return;
    } else if (task instanceof DataFiltering) {
      _format((DataFiltering)task, document);
      return;
    } else if (task instanceof EObject) {
      _format((EObject)task, document);
      return;
    } else if (task == null) {
      _format((Void)null, document);
      return;
    } else if (task != null) {
      _format(task, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(task, document).toString());
    }
  }
}
